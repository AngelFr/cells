/**
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ApiClient = require("../ApiClient");

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _modelDocstoreDeleteDocumentsRequest = require('../model/DocstoreDeleteDocumentsRequest');

var _modelDocstoreDeleteDocumentsRequest2 = _interopRequireDefault(_modelDocstoreDeleteDocumentsRequest);

var _modelDocstoreDeleteDocumentsResponse = require('../model/DocstoreDeleteDocumentsResponse');

var _modelDocstoreDeleteDocumentsResponse2 = _interopRequireDefault(_modelDocstoreDeleteDocumentsResponse);

var _modelDocstoreGetDocumentResponse = require('../model/DocstoreGetDocumentResponse');

var _modelDocstoreGetDocumentResponse2 = _interopRequireDefault(_modelDocstoreGetDocumentResponse);

var _modelDocstorePutDocumentRequest = require('../model/DocstorePutDocumentRequest');

var _modelDocstorePutDocumentRequest2 = _interopRequireDefault(_modelDocstorePutDocumentRequest);

var _modelDocstorePutDocumentResponse = require('../model/DocstorePutDocumentResponse');

var _modelDocstorePutDocumentResponse2 = _interopRequireDefault(_modelDocstorePutDocumentResponse);

var _modelRestDocstoreCollection = require('../model/RestDocstoreCollection');

var _modelRestDocstoreCollection2 = _interopRequireDefault(_modelRestDocstoreCollection);

var _modelRestListDocstoreRequest = require('../model/RestListDocstoreRequest');

var _modelRestListDocstoreRequest2 = _interopRequireDefault(_modelRestListDocstoreRequest);

/**
* DocStoreService service.
* @module api/DocStoreServiceApi
* @version 1.0
*/

var DocStoreServiceApi = (function () {

  /**
  * Constructs a new DocStoreServiceApi. 
  * @alias module:api/DocStoreServiceApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */

  function DocStoreServiceApi(apiClient) {
    _classCallCheck(this, DocStoreServiceApi);

    this.apiClient = apiClient || _ApiClient2['default'].instance;
  }

  /**
   * Delete one or more docs inside a given store
   * @param {String} storeID 
   * @param {module:model/DocstoreDeleteDocumentsRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocstoreDeleteDocumentsResponse} and HTTP response
   */

  DocStoreServiceApi.prototype.deleteDocWithHttpInfo = function deleteDocWithHttpInfo(storeID, body) {
    var postBody = body;

    // verify the required parameter 'storeID' is set
    if (storeID === undefined || storeID === null) {
      throw new Error("Missing the required parameter 'storeID' when calling deleteDoc");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling deleteDoc");
    }

    var pathParams = {
      'StoreID': storeID
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelDocstoreDeleteDocumentsResponse2['default'];

    return this.apiClient.callApi('/docstore/bulk_delete/{StoreID}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Delete one or more docs inside a given store
   * @param {String} storeID 
   * @param {module:model/DocstoreDeleteDocumentsRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocstoreDeleteDocumentsResponse}
   */

  DocStoreServiceApi.prototype.deleteDoc = function deleteDoc(storeID, body) {
    return this.deleteDocWithHttpInfo(storeID, body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Load one document by ID from a given store
   * @param {String} storeID 
   * @param {String} documentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocstoreGetDocumentResponse} and HTTP response
   */

  DocStoreServiceApi.prototype.getDocWithHttpInfo = function getDocWithHttpInfo(storeID, documentID) {
    var postBody = null;

    // verify the required parameter 'storeID' is set
    if (storeID === undefined || storeID === null) {
      throw new Error("Missing the required parameter 'storeID' when calling getDoc");
    }

    // verify the required parameter 'documentID' is set
    if (documentID === undefined || documentID === null) {
      throw new Error("Missing the required parameter 'documentID' when calling getDoc");
    }

    var pathParams = {
      'StoreID': storeID,
      'DocumentID': documentID
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelDocstoreGetDocumentResponse2['default'];

    return this.apiClient.callApi('/docstore/{StoreID}/{DocumentID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Load one document by ID from a given store
   * @param {String} storeID 
   * @param {String} documentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocstoreGetDocumentResponse}
   */

  DocStoreServiceApi.prototype.getDoc = function getDoc(storeID, documentID) {
    return this.getDocWithHttpInfo(storeID, documentID).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * List all docs of a given store
   * @param {String} storeID 
   * @param {module:model/RestListDocstoreRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDocstoreCollection} and HTTP response
   */

  DocStoreServiceApi.prototype.listDocsWithHttpInfo = function listDocsWithHttpInfo(storeID, body) {
    var postBody = body;

    // verify the required parameter 'storeID' is set
    if (storeID === undefined || storeID === null) {
      throw new Error("Missing the required parameter 'storeID' when calling listDocs");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling listDocs");
    }

    var pathParams = {
      'StoreID': storeID
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestDocstoreCollection2['default'];

    return this.apiClient.callApi('/docstore/{StoreID}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * List all docs of a given store
   * @param {String} storeID 
   * @param {module:model/RestListDocstoreRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDocstoreCollection}
   */

  DocStoreServiceApi.prototype.listDocs = function listDocs(storeID, body) {
    return this.listDocsWithHttpInfo(storeID, body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Put a document inside a given store
   * @param {String} storeID 
   * @param {String} documentID 
   * @param {module:model/DocstorePutDocumentRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocstorePutDocumentResponse} and HTTP response
   */

  DocStoreServiceApi.prototype.putDocWithHttpInfo = function putDocWithHttpInfo(storeID, documentID, body) {
    var postBody = body;

    // verify the required parameter 'storeID' is set
    if (storeID === undefined || storeID === null) {
      throw new Error("Missing the required parameter 'storeID' when calling putDoc");
    }

    // verify the required parameter 'documentID' is set
    if (documentID === undefined || documentID === null) {
      throw new Error("Missing the required parameter 'documentID' when calling putDoc");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling putDoc");
    }

    var pathParams = {
      'StoreID': storeID,
      'DocumentID': documentID
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelDocstorePutDocumentResponse2['default'];

    return this.apiClient.callApi('/docstore/{StoreID}/{DocumentID}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Put a document inside a given store
   * @param {String} storeID 
   * @param {String} documentID 
   * @param {module:model/DocstorePutDocumentRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocstorePutDocumentResponse}
   */

  DocStoreServiceApi.prototype.putDoc = function putDoc(storeID, documentID, body) {
    return this.putDocWithHttpInfo(storeID, documentID, body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  return DocStoreServiceApi;
})();

exports['default'] = DocStoreServiceApi;
module.exports = exports['default'];
