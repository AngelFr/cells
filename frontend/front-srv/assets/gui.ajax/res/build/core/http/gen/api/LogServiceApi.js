/**
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ApiClient = require("../ApiClient");

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _modelLogListLogRequest = require('../model/LogListLogRequest');

var _modelLogListLogRequest2 = _interopRequireDefault(_modelLogListLogRequest);

var _modelLogTimeRangeRequest = require('../model/LogTimeRangeRequest');

var _modelLogTimeRangeRequest2 = _interopRequireDefault(_modelLogTimeRangeRequest);

var _modelRestLogMessageCollection = require('../model/RestLogMessageCollection');

var _modelRestLogMessageCollection2 = _interopRequireDefault(_modelRestLogMessageCollection);

var _modelRestTimeRangeResultCollection = require('../model/RestTimeRangeResultCollection');

var _modelRestTimeRangeResultCollection2 = _interopRequireDefault(_modelRestTimeRangeResultCollection);

/**
* LogService service.
* @module api/LogServiceApi
* @version 1.0
*/

var LogServiceApi = (function () {

  /**
  * Constructs a new LogServiceApi. 
  * @alias module:api/LogServiceApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */

  function LogServiceApi(apiClient) {
    _classCallCheck(this, LogServiceApi);

    this.apiClient = apiClient || _ApiClient2['default'].instance;
  }

  /**
   * Auditable Logs, in Json or CSV format
   * @param {module:model/LogListLogRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestLogMessageCollection} and HTTP response
   */

  LogServiceApi.prototype.auditWithHttpInfo = function auditWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling audit");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestLogMessageCollection2['default'];

    return this.apiClient.callApi('/log/audit', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Auditable Logs, in Json or CSV format
   * @param {module:model/LogListLogRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestLogMessageCollection}
   */

  LogServiceApi.prototype.audit = function audit(body) {
    return this.auditWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Retrieves aggregated audit logs to generate charts
   * @param {module:model/LogTimeRangeRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestTimeRangeResultCollection} and HTTP response
   */

  LogServiceApi.prototype.auditChartDataWithHttpInfo = function auditChartDataWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling auditChartData");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestTimeRangeResultCollection2['default'];

    return this.apiClient.callApi('/log/audit/chartdata', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Retrieves aggregated audit logs to generate charts
   * @param {module:model/LogTimeRangeRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestTimeRangeResultCollection}
   */

  LogServiceApi.prototype.auditChartData = function auditChartData(body) {
    return this.auditChartDataWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Auditable Logs, in Json or CSV format
   * @param {module:model/LogListLogRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestLogMessageCollection} and HTTP response
   */

  LogServiceApi.prototype.auditExportWithHttpInfo = function auditExportWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling auditExport");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestLogMessageCollection2['default'];

    return this.apiClient.callApi('/log/audit/export', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Auditable Logs, in Json or CSV format
   * @param {module:model/LogListLogRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestLogMessageCollection}
   */

  LogServiceApi.prototype.auditExport = function auditExport(body) {
    return this.auditExportWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Technical Logs, in Json or CSV format
   * @param {module:model/LogListLogRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestLogMessageCollection} and HTTP response
   */

  LogServiceApi.prototype.syslogWithHttpInfo = function syslogWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling syslog");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestLogMessageCollection2['default'];

    return this.apiClient.callApi('/log/sys', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Technical Logs, in Json or CSV format
   * @param {module:model/LogListLogRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestLogMessageCollection}
   */

  LogServiceApi.prototype.syslog = function syslog(body) {
    return this.syslogWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * Technical Logs, in Json or CSV format
   * @param {module:model/LogListLogRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestLogMessageCollection} and HTTP response
   */

  LogServiceApi.prototype.syslogExportWithHttpInfo = function syslogExportWithHttpInfo(body) {
    var postBody = body;

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling syslogExport");
    }

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestLogMessageCollection2['default'];

    return this.apiClient.callApi('/log/sys/export', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * Technical Logs, in Json or CSV format
   * @param {module:model/LogListLogRequest} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestLogMessageCollection}
   */

  LogServiceApi.prototype.syslogExport = function syslogExport(body) {
    return this.syslogExportWithHttpInfo(body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  return LogServiceApi;
})();

exports['default'] = LogServiceApi;
module.exports = exports['default'];
