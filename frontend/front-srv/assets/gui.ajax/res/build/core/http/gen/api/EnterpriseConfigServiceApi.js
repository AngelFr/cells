/**
 * Pydio Cells Rest API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ApiClient = require("../ApiClient");

var _ApiClient2 = _interopRequireDefault(_ApiClient);

var _modelRestDeleteVersioningPolicyResponse = require('../model/RestDeleteVersioningPolicyResponse');

var _modelRestDeleteVersioningPolicyResponse2 = _interopRequireDefault(_modelRestDeleteVersioningPolicyResponse);

var _modelRestExternalDirectoryCollection = require('../model/RestExternalDirectoryCollection');

var _modelRestExternalDirectoryCollection2 = _interopRequireDefault(_modelRestExternalDirectoryCollection);

var _modelRestExternalDirectoryConfig = require('../model/RestExternalDirectoryConfig');

var _modelRestExternalDirectoryConfig2 = _interopRequireDefault(_modelRestExternalDirectoryConfig);

var _modelRestExternalDirectoryResponse = require('../model/RestExternalDirectoryResponse');

var _modelRestExternalDirectoryResponse2 = _interopRequireDefault(_modelRestExternalDirectoryResponse);

var _modelTreeVersioningPolicy = require('../model/TreeVersioningPolicy');

var _modelTreeVersioningPolicy2 = _interopRequireDefault(_modelTreeVersioningPolicy);

/**
* EnterpriseConfigService service.
* @module api/EnterpriseConfigServiceApi
* @version 1.0
*/

var EnterpriseConfigServiceApi = (function () {

  /**
  * Constructs a new EnterpriseConfigServiceApi. 
  * @alias module:api/EnterpriseConfigServiceApi
  * @class
  * @param {module:ApiClient} apiClient Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */

  function EnterpriseConfigServiceApi(apiClient) {
    _classCallCheck(this, EnterpriseConfigServiceApi);

    this.apiClient = apiClient || _ApiClient2['default'].instance;
  }

  /**
   * [Enterprise Only] Delete external directory
   * @param {String} configId 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestExternalDirectoryResponse} and HTTP response
   */

  EnterpriseConfigServiceApi.prototype.deleteExternalDirectoryWithHttpInfo = function deleteExternalDirectoryWithHttpInfo(configId) {
    var postBody = null;

    // verify the required parameter 'configId' is set
    if (configId === undefined || configId === null) {
      throw new Error("Missing the required parameter 'configId' when calling deleteExternalDirectory");
    }

    var pathParams = {
      'ConfigId': configId
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestExternalDirectoryResponse2['default'];

    return this.apiClient.callApi('/config/directories/{ConfigId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * [Enterprise Only] Delete external directory
   * @param {String} configId 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestExternalDirectoryResponse}
   */

  EnterpriseConfigServiceApi.prototype.deleteExternalDirectory = function deleteExternalDirectory(configId) {
    return this.deleteExternalDirectoryWithHttpInfo(configId).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * [Enterprise Only] Delete a versioning policy
   * @param {String} uuid 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestDeleteVersioningPolicyResponse} and HTTP response
   */

  EnterpriseConfigServiceApi.prototype.deleteVersioningPolicyWithHttpInfo = function deleteVersioningPolicyWithHttpInfo(uuid) {
    var postBody = null;

    // verify the required parameter 'uuid' is set
    if (uuid === undefined || uuid === null) {
      throw new Error("Missing the required parameter 'uuid' when calling deleteVersioningPolicy");
    }

    var pathParams = {
      'Uuid': uuid
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestDeleteVersioningPolicyResponse2['default'];

    return this.apiClient.callApi('/config/versioning/{Uuid}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * [Enterprise Only] Delete a versioning policy
   * @param {String} uuid 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestDeleteVersioningPolicyResponse}
   */

  EnterpriseConfigServiceApi.prototype.deleteVersioningPolicy = function deleteVersioningPolicy(uuid) {
    return this.deleteVersioningPolicyWithHttpInfo(uuid).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * [Enterprise Only] List additional user directories
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestExternalDirectoryCollection} and HTTP response
   */

  EnterpriseConfigServiceApi.prototype.listExternalDirectoriesWithHttpInfo = function listExternalDirectoriesWithHttpInfo() {
    var postBody = null;

    var pathParams = {};
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestExternalDirectoryCollection2['default'];

    return this.apiClient.callApi('/config/directories', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * [Enterprise Only] List additional user directories
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestExternalDirectoryCollection}
   */

  EnterpriseConfigServiceApi.prototype.listExternalDirectories = function listExternalDirectories() {
    return this.listExternalDirectoriesWithHttpInfo().then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * [Enterprise Only] Add/Create an external directory
   * @param {String} configId 
   * @param {module:model/RestExternalDirectoryConfig} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RestExternalDirectoryResponse} and HTTP response
   */

  EnterpriseConfigServiceApi.prototype.putExternalDirectoryWithHttpInfo = function putExternalDirectoryWithHttpInfo(configId, body) {
    var postBody = body;

    // verify the required parameter 'configId' is set
    if (configId === undefined || configId === null) {
      throw new Error("Missing the required parameter 'configId' when calling putExternalDirectory");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling putExternalDirectory");
    }

    var pathParams = {
      'ConfigId': configId
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelRestExternalDirectoryResponse2['default'];

    return this.apiClient.callApi('/config/directories/{ConfigId}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * [Enterprise Only] Add/Create an external directory
   * @param {String} configId 
   * @param {module:model/RestExternalDirectoryConfig} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RestExternalDirectoryResponse}
   */

  EnterpriseConfigServiceApi.prototype.putExternalDirectory = function putExternalDirectory(configId, body) {
    return this.putExternalDirectoryWithHttpInfo(configId, body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  /**
   * [Enterprise Only] Create or update a versioning policy
   * @param {String} uuid 
   * @param {module:model/TreeVersioningPolicy} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TreeVersioningPolicy} and HTTP response
   */

  EnterpriseConfigServiceApi.prototype.putVersioningPolicyWithHttpInfo = function putVersioningPolicyWithHttpInfo(uuid, body) {
    var postBody = body;

    // verify the required parameter 'uuid' is set
    if (uuid === undefined || uuid === null) {
      throw new Error("Missing the required parameter 'uuid' when calling putVersioningPolicy");
    }

    // verify the required parameter 'body' is set
    if (body === undefined || body === null) {
      throw new Error("Missing the required parameter 'body' when calling putVersioningPolicy");
    }

    var pathParams = {
      'Uuid': uuid
    };
    var queryParams = {};
    var headerParams = {};
    var formParams = {};

    var authNames = [];
    var contentTypes = ['application/json'];
    var accepts = ['application/json'];
    var returnType = _modelTreeVersioningPolicy2['default'];

    return this.apiClient.callApi('/config/versioning/{Uuid}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType);
  };

  /**
   * [Enterprise Only] Create or update a versioning policy
   * @param {String} uuid 
   * @param {module:model/TreeVersioningPolicy} body 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TreeVersioningPolicy}
   */

  EnterpriseConfigServiceApi.prototype.putVersioningPolicy = function putVersioningPolicy(uuid, body) {
    return this.putVersioningPolicyWithHttpInfo(uuid, body).then(function (response_and_data) {
      return response_and_data.data;
    });
  };

  return EnterpriseConfigServiceApi;
})();

exports['default'] = EnterpriseConfigServiceApi;
module.exports = exports['default'];
