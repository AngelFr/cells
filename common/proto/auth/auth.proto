syntax = "proto3";

package auth;

//============== SERVICES ==========
service AuthTokenRevoker {

    // Look for an invalid token entry in the store that match the current one
    rpc MatchInvalid (MatchInvalidTokenRequest) returns (MatchInvalidTokenResponse) {};

    // Revoker invalidates the current token and specifies if the invalidation is due to a refresh or a revokation
    rpc Revoke (RevokeTokenRequest) returns (RevokeTokenResponse) {};

    // PruneTokens clear revoked tokens
    rpc PruneTokens (PruneTokensRequest) returns (PruneTokensResponse) {};

    // Store a failed connection
    rpc StoreFailedConnection (ConnectionAttempt) returns (ConnectionAttempt) {};

    // Check if a connection is banned
    rpc IsBanned (ConnectionAttempt) returns (BannedResponse) {};

    // List banned IPs
    rpc BanList(BanListRequest) returns (BanListResponse) {};

}

//============== MESSAGES ==========
enum State {
    NO_MATCH = 0;
    REVOKED = 1;
}


message Token {
    string Value = 1;           // The token to be invalidated
    string AdditionalInfo = 2;  // Other info that initiates the revokation
}

message MatchInvalidTokenRequest {
    string Token = 1;           // The token to find in store
}

message MatchInvalidTokenResponse {
    State State = 1;            // The token to find in store
    string RevocationInfo = 2;  // If state is REFRESHED or REVOKE the user who initiates the token invalidation
}

message RevokeTokenRequest {
    Token Token = 1;
}

message RevokeTokenResponse {
    bool Success = 1;
}

message PruneTokensRequest {

}

message PruneTokensResponse {
    repeated string tokens = 1;
}

message ConnectionAttempt {
    string IP = 1;
    int64 connectionTime = 3;
    bool IsSuccess = 4;
    map <string, string> Details = 5;
}

message BannedConnection {
    string IP = 1;
    int64 BanExpire = 2;
    repeated ConnectionAttempt History = 3;
}

message BannedResponse {
    bool IsBanned = 1;
    BannedConnection Connection = 2;
}

message BanListRequest {
    string IP = 1;
    int32 Limit = 2;
    int32 Offset = 3;
}

message BanListResponse {
    repeated BannedConnection BannedConnections = 1;
}