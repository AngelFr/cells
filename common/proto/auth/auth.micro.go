// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: auth.proto

/*
Package auth is a generated protocol buffer package.

It is generated from these files:
	auth.proto
	ldap.proto

It has these top-level messages:
	Token
	MatchInvalidTokenRequest
	MatchInvalidTokenResponse
	RevokeTokenRequest
	RevokeTokenResponse
	PruneTokensRequest
	PruneTokensResponse
	ConnectionAttempt
	BannedConnection
	BannedResponse
	BanListRequest
	BanListResponse
	LdapSearchFilter
	LdapMapping
	LdapMemberOfMapping
	LdapServerConfig
*/
package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AuthTokenRevoker service

type AuthTokenRevokerClient interface {
	// Look for an invalid token entry in the store that match the current one
	MatchInvalid(ctx context.Context, in *MatchInvalidTokenRequest, opts ...client.CallOption) (*MatchInvalidTokenResponse, error)
	// Revoker invalidates the current token and specifies if the invalidation is due to a refresh or a revokation
	Revoke(ctx context.Context, in *RevokeTokenRequest, opts ...client.CallOption) (*RevokeTokenResponse, error)
	// PruneTokens clear revoked tokens
	PruneTokens(ctx context.Context, in *PruneTokensRequest, opts ...client.CallOption) (*PruneTokensResponse, error)
	// Store a failed connection
	StoreFailedConnection(ctx context.Context, in *ConnectionAttempt, opts ...client.CallOption) (*ConnectionAttempt, error)
	// Check if a connection is banned
	IsBanned(ctx context.Context, in *ConnectionAttempt, opts ...client.CallOption) (*BannedResponse, error)
	// List banned IPs
	BanList(ctx context.Context, in *BanListRequest, opts ...client.CallOption) (*BanListResponse, error)
}

type authTokenRevokerClient struct {
	c           client.Client
	serviceName string
}

func NewAuthTokenRevokerClient(serviceName string, c client.Client) AuthTokenRevokerClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "auth"
	}
	return &authTokenRevokerClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *authTokenRevokerClient) MatchInvalid(ctx context.Context, in *MatchInvalidTokenRequest, opts ...client.CallOption) (*MatchInvalidTokenResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AuthTokenRevoker.MatchInvalid", in)
	out := new(MatchInvalidTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTokenRevokerClient) Revoke(ctx context.Context, in *RevokeTokenRequest, opts ...client.CallOption) (*RevokeTokenResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AuthTokenRevoker.Revoke", in)
	out := new(RevokeTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTokenRevokerClient) PruneTokens(ctx context.Context, in *PruneTokensRequest, opts ...client.CallOption) (*PruneTokensResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AuthTokenRevoker.PruneTokens", in)
	out := new(PruneTokensResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTokenRevokerClient) StoreFailedConnection(ctx context.Context, in *ConnectionAttempt, opts ...client.CallOption) (*ConnectionAttempt, error) {
	req := c.c.NewRequest(c.serviceName, "AuthTokenRevoker.StoreFailedConnection", in)
	out := new(ConnectionAttempt)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTokenRevokerClient) IsBanned(ctx context.Context, in *ConnectionAttempt, opts ...client.CallOption) (*BannedResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AuthTokenRevoker.IsBanned", in)
	out := new(BannedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authTokenRevokerClient) BanList(ctx context.Context, in *BanListRequest, opts ...client.CallOption) (*BanListResponse, error) {
	req := c.c.NewRequest(c.serviceName, "AuthTokenRevoker.BanList", in)
	out := new(BanListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthTokenRevoker service

type AuthTokenRevokerHandler interface {
	// Look for an invalid token entry in the store that match the current one
	MatchInvalid(context.Context, *MatchInvalidTokenRequest, *MatchInvalidTokenResponse) error
	// Revoker invalidates the current token and specifies if the invalidation is due to a refresh or a revokation
	Revoke(context.Context, *RevokeTokenRequest, *RevokeTokenResponse) error
	// PruneTokens clear revoked tokens
	PruneTokens(context.Context, *PruneTokensRequest, *PruneTokensResponse) error
	// Store a failed connection
	StoreFailedConnection(context.Context, *ConnectionAttempt, *ConnectionAttempt) error
	// Check if a connection is banned
	IsBanned(context.Context, *ConnectionAttempt, *BannedResponse) error
	// List banned IPs
	BanList(context.Context, *BanListRequest, *BanListResponse) error
}

func RegisterAuthTokenRevokerHandler(s server.Server, hdlr AuthTokenRevokerHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&AuthTokenRevoker{hdlr}, opts...))
}

type AuthTokenRevoker struct {
	AuthTokenRevokerHandler
}

func (h *AuthTokenRevoker) MatchInvalid(ctx context.Context, in *MatchInvalidTokenRequest, out *MatchInvalidTokenResponse) error {
	return h.AuthTokenRevokerHandler.MatchInvalid(ctx, in, out)
}

func (h *AuthTokenRevoker) Revoke(ctx context.Context, in *RevokeTokenRequest, out *RevokeTokenResponse) error {
	return h.AuthTokenRevokerHandler.Revoke(ctx, in, out)
}

func (h *AuthTokenRevoker) PruneTokens(ctx context.Context, in *PruneTokensRequest, out *PruneTokensResponse) error {
	return h.AuthTokenRevokerHandler.PruneTokens(ctx, in, out)
}

func (h *AuthTokenRevoker) StoreFailedConnection(ctx context.Context, in *ConnectionAttempt, out *ConnectionAttempt) error {
	return h.AuthTokenRevokerHandler.StoreFailedConnection(ctx, in, out)
}

func (h *AuthTokenRevoker) IsBanned(ctx context.Context, in *ConnectionAttempt, out *BannedResponse) error {
	return h.AuthTokenRevokerHandler.IsBanned(ctx, in, out)
}

func (h *AuthTokenRevoker) BanList(ctx context.Context, in *BanListRequest, out *BanListResponse) error {
	return h.AuthTokenRevokerHandler.BanList(ctx, in, out)
}
