// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data.proto

package rest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import tree "github.com/pydio/cells/common/proto/tree"
import docstore "github.com/pydio/cells/common/proto/docstore"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SearchResults struct {
	Results []*tree.Node `protobuf:"bytes,1,rep,name=Results" json:"Results,omitempty"`
	Total   int32        `protobuf:"varint,2,opt,name=Total" json:"Total,omitempty"`
}

func (m *SearchResults) Reset()                    { *m = SearchResults{} }
func (m *SearchResults) String() string            { return proto.CompactTextString(m) }
func (*SearchResults) ProtoMessage()               {}
func (*SearchResults) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *SearchResults) GetResults() []*tree.Node {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *SearchResults) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Generic container for responses sending pagination information
type Pagination struct {
	// Current Limit parameter, either passed by request or default value
	Limit int32 `protobuf:"varint,1,opt,name=Limit" json:"Limit,omitempty"`
	// Current Offset value
	CurrentOffset int32 `protobuf:"varint,2,opt,name=CurrentOffset" json:"CurrentOffset,omitempty"`
	// Total number of records
	Total int32 `protobuf:"varint,3,opt,name=Total" json:"Total,omitempty"`
	// Current number of Page
	CurrentPage int32 `protobuf:"varint,4,opt,name=CurrentPage" json:"CurrentPage,omitempty"`
	// Number of detected pages
	TotalPages int32 `protobuf:"varint,5,opt,name=TotalPages" json:"TotalPages,omitempty"`
	// Offset value for next page if there is one
	NextOffset int32 `protobuf:"varint,6,opt,name=NextOffset" json:"NextOffset,omitempty"`
	// Offset value for previous page, if there is one
	PrevOffset int32 `protobuf:"varint,7,opt,name=PrevOffset" json:"PrevOffset,omitempty"`
}

func (m *Pagination) Reset()                    { *m = Pagination{} }
func (m *Pagination) String() string            { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()               {}
func (*Pagination) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Pagination) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Pagination) GetCurrentOffset() int32 {
	if m != nil {
		return m.CurrentOffset
	}
	return 0
}

func (m *Pagination) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Pagination) GetCurrentPage() int32 {
	if m != nil {
		return m.CurrentPage
	}
	return 0
}

func (m *Pagination) GetTotalPages() int32 {
	if m != nil {
		return m.TotalPages
	}
	return 0
}

func (m *Pagination) GetNextOffset() int32 {
	if m != nil {
		return m.NextOffset
	}
	return 0
}

func (m *Pagination) GetPrevOffset() int32 {
	if m != nil {
		return m.PrevOffset
	}
	return 0
}

type Metadata struct {
	Namespace string `protobuf:"bytes,1,opt,name=Namespace" json:"Namespace,omitempty"`
	JsonMeta  string `protobuf:"bytes,2,opt,name=JsonMeta" json:"JsonMeta,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *Metadata) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Metadata) GetJsonMeta() string {
	if m != nil {
		return m.JsonMeta
	}
	return ""
}

type MetaCollection struct {
	NodePath  string      `protobuf:"bytes,1,opt,name=NodePath" json:"NodePath,omitempty"`
	Metadatas []*Metadata `protobuf:"bytes,2,rep,name=Metadatas" json:"Metadatas,omitempty"`
}

func (m *MetaCollection) Reset()                    { *m = MetaCollection{} }
func (m *MetaCollection) String() string            { return proto.CompactTextString(m) }
func (*MetaCollection) ProtoMessage()               {}
func (*MetaCollection) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *MetaCollection) GetNodePath() string {
	if m != nil {
		return m.NodePath
	}
	return ""
}

func (m *MetaCollection) GetMetadatas() []*Metadata {
	if m != nil {
		return m.Metadatas
	}
	return nil
}

type MetaNamespaceRequest struct {
	NodePath  string   `protobuf:"bytes,1,opt,name=NodePath" json:"NodePath,omitempty"`
	Namespace []string `protobuf:"bytes,2,rep,name=Namespace" json:"Namespace,omitempty"`
}

func (m *MetaNamespaceRequest) Reset()                    { *m = MetaNamespaceRequest{} }
func (m *MetaNamespaceRequest) String() string            { return proto.CompactTextString(m) }
func (*MetaNamespaceRequest) ProtoMessage()               {}
func (*MetaNamespaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *MetaNamespaceRequest) GetNodePath() string {
	if m != nil {
		return m.NodePath
	}
	return ""
}

func (m *MetaNamespaceRequest) GetNamespace() []string {
	if m != nil {
		return m.Namespace
	}
	return nil
}

type GetBulkMetaRequest struct {
	NodePaths        []string `protobuf:"bytes,1,rep,name=NodePaths" json:"NodePaths,omitempty"`
	NodeUuids        []string `protobuf:"bytes,2,rep,name=NodeUuids" json:"NodeUuids,omitempty"`
	AllMetaProviders bool     `protobuf:"varint,3,opt,name=AllMetaProviders" json:"AllMetaProviders,omitempty"`
	Versions         bool     `protobuf:"varint,4,opt,name=Versions" json:"Versions,omitempty"`
	Offset           int32    `protobuf:"varint,5,opt,name=Offset" json:"Offset,omitempty"`
	Limit            int32    `protobuf:"varint,6,opt,name=Limit" json:"Limit,omitempty"`
}

func (m *GetBulkMetaRequest) Reset()                    { *m = GetBulkMetaRequest{} }
func (m *GetBulkMetaRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBulkMetaRequest) ProtoMessage()               {}
func (*GetBulkMetaRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *GetBulkMetaRequest) GetNodePaths() []string {
	if m != nil {
		return m.NodePaths
	}
	return nil
}

func (m *GetBulkMetaRequest) GetNodeUuids() []string {
	if m != nil {
		return m.NodeUuids
	}
	return nil
}

func (m *GetBulkMetaRequest) GetAllMetaProviders() bool {
	if m != nil {
		return m.AllMetaProviders
	}
	return false
}

func (m *GetBulkMetaRequest) GetVersions() bool {
	if m != nil {
		return m.Versions
	}
	return false
}

func (m *GetBulkMetaRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *GetBulkMetaRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type BulkMetaResponse struct {
	Nodes      []*tree.Node `protobuf:"bytes,1,rep,name=Nodes" json:"Nodes,omitempty"`
	Pagination *Pagination  `protobuf:"bytes,5,opt,name=Pagination" json:"Pagination,omitempty"`
}

func (m *BulkMetaResponse) Reset()                    { *m = BulkMetaResponse{} }
func (m *BulkMetaResponse) String() string            { return proto.CompactTextString(m) }
func (*BulkMetaResponse) ProtoMessage()               {}
func (*BulkMetaResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *BulkMetaResponse) GetNodes() []*tree.Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *BulkMetaResponse) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type HeadNodeRequest struct {
	Node string `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
}

func (m *HeadNodeRequest) Reset()                    { *m = HeadNodeRequest{} }
func (m *HeadNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*HeadNodeRequest) ProtoMessage()               {}
func (*HeadNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *HeadNodeRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type HeadNodeResponse struct {
	Node *tree.Node `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
}

func (m *HeadNodeResponse) Reset()                    { *m = HeadNodeResponse{} }
func (m *HeadNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*HeadNodeResponse) ProtoMessage()               {}
func (*HeadNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

func (m *HeadNodeResponse) GetNode() *tree.Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type CreateNodesRequest struct {
	Nodes     []*tree.Node `protobuf:"bytes,1,rep,name=Nodes" json:"Nodes,omitempty"`
	Recursive bool         `protobuf:"varint,2,opt,name=Recursive" json:"Recursive,omitempty"`
}

func (m *CreateNodesRequest) Reset()                    { *m = CreateNodesRequest{} }
func (m *CreateNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNodesRequest) ProtoMessage()               {}
func (*CreateNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *CreateNodesRequest) GetNodes() []*tree.Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *CreateNodesRequest) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

type NodesCollection struct {
	Parent   *tree.Node   `protobuf:"bytes,1,opt,name=Parent" json:"Parent,omitempty"`
	Children []*tree.Node `protobuf:"bytes,2,rep,name=Children" json:"Children,omitempty"`
}

func (m *NodesCollection) Reset()                    { *m = NodesCollection{} }
func (m *NodesCollection) String() string            { return proto.CompactTextString(m) }
func (*NodesCollection) ProtoMessage()               {}
func (*NodesCollection) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *NodesCollection) GetParent() *tree.Node {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *NodesCollection) GetChildren() []*tree.Node {
	if m != nil {
		return m.Children
	}
	return nil
}

type DeleteNodesRequest struct {
	Nodes     []*tree.Node `protobuf:"bytes,1,rep,name=Nodes" json:"Nodes,omitempty"`
	Recursive bool         `protobuf:"varint,2,opt,name=Recursive" json:"Recursive,omitempty"`
}

func (m *DeleteNodesRequest) Reset()                    { *m = DeleteNodesRequest{} }
func (m *DeleteNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodesRequest) ProtoMessage()               {}
func (*DeleteNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

func (m *DeleteNodesRequest) GetNodes() []*tree.Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *DeleteNodesRequest) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

type DeleteJobResult struct {
	Uuid  string `protobuf:"bytes,1,opt,name=Uuid" json:"Uuid,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=Label" json:"Label,omitempty"`
}

func (m *DeleteJobResult) Reset()                    { *m = DeleteJobResult{} }
func (m *DeleteJobResult) String() string            { return proto.CompactTextString(m) }
func (*DeleteJobResult) ProtoMessage()               {}
func (*DeleteJobResult) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{12} }

func (m *DeleteJobResult) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *DeleteJobResult) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type DeleteNodesResponse struct {
	DeleteJobs []*DeleteJobResult `protobuf:"bytes,1,rep,name=DeleteJobs" json:"DeleteJobs,omitempty"`
}

func (m *DeleteNodesResponse) Reset()                    { *m = DeleteNodesResponse{} }
func (m *DeleteNodesResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodesResponse) ProtoMessage()               {}
func (*DeleteNodesResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{13} }

func (m *DeleteNodesResponse) GetDeleteJobs() []*DeleteJobResult {
	if m != nil {
		return m.DeleteJobs
	}
	return nil
}

type ListDocstoreRequest struct {
	StoreID   string                  `protobuf:"bytes,1,opt,name=StoreID" json:"StoreID,omitempty"`
	Query     *docstore.DocumentQuery `protobuf:"bytes,2,opt,name=Query" json:"Query,omitempty"`
	CountOnly bool                    `protobuf:"varint,3,opt,name=CountOnly" json:"CountOnly,omitempty"`
}

func (m *ListDocstoreRequest) Reset()                    { *m = ListDocstoreRequest{} }
func (m *ListDocstoreRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDocstoreRequest) ProtoMessage()               {}
func (*ListDocstoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{14} }

func (m *ListDocstoreRequest) GetStoreID() string {
	if m != nil {
		return m.StoreID
	}
	return ""
}

func (m *ListDocstoreRequest) GetQuery() *docstore.DocumentQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ListDocstoreRequest) GetCountOnly() bool {
	if m != nil {
		return m.CountOnly
	}
	return false
}

type DocstoreCollection struct {
	Docs  []*docstore.Document `protobuf:"bytes,1,rep,name=Docs" json:"Docs,omitempty"`
	Total int64                `protobuf:"varint,2,opt,name=Total" json:"Total,omitempty"`
}

func (m *DocstoreCollection) Reset()                    { *m = DocstoreCollection{} }
func (m *DocstoreCollection) String() string            { return proto.CompactTextString(m) }
func (*DocstoreCollection) ProtoMessage()               {}
func (*DocstoreCollection) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{15} }

func (m *DocstoreCollection) GetDocs() []*docstore.Document {
	if m != nil {
		return m.Docs
	}
	return nil
}

func (m *DocstoreCollection) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type ChangeRequest struct {
	SeqID   int64  `protobuf:"varint,1,opt,name=SeqID" json:"SeqID,omitempty"`
	Filter  string `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
	Flatten bool   `protobuf:"varint,3,opt,name=flatten" json:"flatten,omitempty"`
	Stream  bool   `protobuf:"varint,4,opt,name=stream" json:"stream,omitempty"`
}

func (m *ChangeRequest) Reset()                    { *m = ChangeRequest{} }
func (m *ChangeRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangeRequest) ProtoMessage()               {}
func (*ChangeRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{16} }

func (m *ChangeRequest) GetSeqID() int64 {
	if m != nil {
		return m.SeqID
	}
	return 0
}

func (m *ChangeRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ChangeRequest) GetFlatten() bool {
	if m != nil {
		return m.Flatten
	}
	return false
}

func (m *ChangeRequest) GetStream() bool {
	if m != nil {
		return m.Stream
	}
	return false
}

type ChangeCollection struct {
	Changes   []*tree.SyncChange `protobuf:"bytes,1,rep,name=Changes,json=changes" json:"Changes,omitempty"`
	LastSeqId int64              `protobuf:"varint,2,opt,name=LastSeqId,json=last_seq" json:"LastSeqId,omitempty"`
}

func (m *ChangeCollection) Reset()                    { *m = ChangeCollection{} }
func (m *ChangeCollection) String() string            { return proto.CompactTextString(m) }
func (*ChangeCollection) ProtoMessage()               {}
func (*ChangeCollection) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{17} }

func (m *ChangeCollection) GetChanges() []*tree.SyncChange {
	if m != nil {
		return m.Changes
	}
	return nil
}

func (m *ChangeCollection) GetLastSeqId() int64 {
	if m != nil {
		return m.LastSeqId
	}
	return 0
}

func init() {
	proto.RegisterType((*SearchResults)(nil), "rest.SearchResults")
	proto.RegisterType((*Pagination)(nil), "rest.Pagination")
	proto.RegisterType((*Metadata)(nil), "rest.Metadata")
	proto.RegisterType((*MetaCollection)(nil), "rest.MetaCollection")
	proto.RegisterType((*MetaNamespaceRequest)(nil), "rest.MetaNamespaceRequest")
	proto.RegisterType((*GetBulkMetaRequest)(nil), "rest.GetBulkMetaRequest")
	proto.RegisterType((*BulkMetaResponse)(nil), "rest.BulkMetaResponse")
	proto.RegisterType((*HeadNodeRequest)(nil), "rest.HeadNodeRequest")
	proto.RegisterType((*HeadNodeResponse)(nil), "rest.HeadNodeResponse")
	proto.RegisterType((*CreateNodesRequest)(nil), "rest.CreateNodesRequest")
	proto.RegisterType((*NodesCollection)(nil), "rest.NodesCollection")
	proto.RegisterType((*DeleteNodesRequest)(nil), "rest.DeleteNodesRequest")
	proto.RegisterType((*DeleteJobResult)(nil), "rest.DeleteJobResult")
	proto.RegisterType((*DeleteNodesResponse)(nil), "rest.DeleteNodesResponse")
	proto.RegisterType((*ListDocstoreRequest)(nil), "rest.ListDocstoreRequest")
	proto.RegisterType((*DocstoreCollection)(nil), "rest.DocstoreCollection")
	proto.RegisterType((*ChangeRequest)(nil), "rest.ChangeRequest")
	proto.RegisterType((*ChangeCollection)(nil), "rest.ChangeCollection")
}

func init() { proto.RegisterFile("data.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 808 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdb, 0x8e, 0x1b, 0x45,
	0x10, 0x95, 0xe3, 0xdb, 0xb8, 0xac, 0xcd, 0x5a, 0x9d, 0x05, 0x2c, 0x13, 0x45, 0xd6, 0x28, 0x44,
	0x51, 0x04, 0x36, 0x72, 0xc4, 0x53, 0x9e, 0xc0, 0x96, 0x80, 0x60, 0x36, 0xa6, 0xbd, 0xf0, 0x00,
	0x42, 0xa8, 0x3d, 0x53, 0xb6, 0x47, 0xb4, 0xa7, 0xbd, 0xdd, 0x3d, 0x2b, 0x2c, 0xf1, 0x7d, 0x7c,
	0x07, 0x9f, 0x82, 0xfa, 0x36, 0x33, 0x66, 0x57, 0xc0, 0x03, 0x2f, 0xbb, 0x53, 0xa7, 0x4e, 0x57,
	0x9d, 0xba, 0x74, 0x1b, 0x20, 0x65, 0x9a, 0x4d, 0x8e, 0x52, 0x68, 0x41, 0x5a, 0x12, 0x95, 0x1e,
	0xbd, 0xde, 0x65, 0x7a, 0x5f, 0x6c, 0x26, 0x89, 0x38, 0x4c, 0x8f, 0xa7, 0x34, 0x13, 0xd3, 0x04,
	0x39, 0x57, 0xd3, 0x44, 0x1c, 0x0e, 0x22, 0x9f, 0x5a, 0xea, 0x54, 0x4b, 0x44, 0xfb, 0xc7, 0x1d,
	0x1d, 0xbd, 0xf9, 0x2f, 0x87, 0x52, 0x91, 0x28, 0x2d, 0x24, 0x96, 0x1f, 0xee, 0x70, 0xfc, 0x0d,
	0x5c, 0xac, 0x91, 0xc9, 0x64, 0x4f, 0x51, 0x15, 0x5c, 0x2b, 0xf2, 0x1c, 0xba, 0xfe, 0x73, 0xd8,
	0x18, 0x37, 0x5f, 0xf6, 0x67, 0x30, 0xb1, 0xb9, 0xae, 0x45, 0x8a, 0x34, 0xb8, 0xc8, 0x15, 0xb4,
	0x6f, 0x84, 0x66, 0x7c, 0xf8, 0x68, 0xdc, 0x78, 0xd9, 0xa6, 0xce, 0x88, 0xff, 0x6c, 0x00, 0xac,
	0xd8, 0x2e, 0xcb, 0x99, 0xce, 0x44, 0x6e, 0x48, 0xcb, 0xec, 0x90, 0xe9, 0x61, 0xc3, 0x91, 0xac,
	0x41, 0x9e, 0xc3, 0xc5, 0xbc, 0x90, 0x12, 0x73, 0xfd, 0x6e, 0xbb, 0x55, 0xa8, 0x7d, 0x88, 0x73,
	0xb0, 0x4a, 0xd0, 0xac, 0x25, 0x20, 0x63, 0xe8, 0x7b, 0xda, 0x8a, 0xed, 0x70, 0xd8, 0xb2, 0xbe,
	0x3a, 0x44, 0x9e, 0x01, 0x58, 0xaa, 0x31, 0xd4, 0xb0, 0x6d, 0x09, 0x35, 0xc4, 0xf8, 0xaf, 0xf1,
	0xb7, 0x90, 0xba, 0xe3, 0xfc, 0x15, 0x62, 0xfc, 0x2b, 0x89, 0x77, 0xde, 0xdf, 0x75, 0xfe, 0x0a,
	0x89, 0x17, 0x10, 0x7d, 0x8b, 0x9a, 0x99, 0xc9, 0x91, 0xa7, 0xd0, 0xbb, 0x66, 0x07, 0x54, 0x47,
	0x96, 0xa0, 0xad, 0xb1, 0x47, 0x2b, 0x80, 0x8c, 0x20, 0x7a, 0xab, 0x44, 0x6e, 0xd8, 0xb6, 0xc4,
	0x1e, 0x2d, 0xed, 0xf8, 0x47, 0x78, 0x6c, 0xfe, 0xcf, 0x05, 0xe7, 0x98, 0xd8, 0x5e, 0x8d, 0x20,
	0x32, 0x1d, 0x5e, 0x31, 0xbd, 0xf7, 0xa1, 0x4a, 0x9b, 0x7c, 0x0c, 0xbd, 0x90, 0x53, 0x0d, 0x1f,
	0xd9, 0xa1, 0x3c, 0x9e, 0x98, 0x7d, 0x99, 0x04, 0x98, 0x56, 0x84, 0x78, 0x05, 0x57, 0xc6, 0x28,
	0x85, 0x50, 0xbc, 0x2d, 0x50, 0xe9, 0x7f, 0xcc, 0x70, 0x56, 0x89, 0xc9, 0x50, 0xaf, 0x24, 0xfe,
	0xa3, 0x01, 0xe4, 0x4b, 0xd4, 0x5f, 0x14, 0xfc, 0x57, 0x13, 0x39, 0x04, 0x34, 0x87, 0x7c, 0x00,
	0xb7, 0x2b, 0xe6, 0x50, 0x00, 0x82, 0xf7, 0xfb, 0x22, 0x4b, 0x55, 0x19, 0x32, 0x00, 0xe4, 0x15,
	0x0c, 0x3e, 0xe7, 0xdc, 0x44, 0x5b, 0x49, 0x71, 0x97, 0xa5, 0x28, 0x95, 0x9d, 0x74, 0x44, 0xef,
	0xe1, 0x46, 0xf8, 0x0f, 0x28, 0x55, 0x26, 0x72, 0x65, 0x27, 0x1e, 0xd1, 0xd2, 0x26, 0xef, 0x43,
	0xc7, 0x8f, 0xca, 0x8d, 0xba, 0x53, 0xad, 0x8f, 0x5b, 0xbd, 0x4e, 0x6d, 0xf5, 0xe2, 0x2d, 0x0c,
	0xaa, 0x22, 0xd4, 0x51, 0xe4, 0x0a, 0xc9, 0x18, 0xda, 0x46, 0xd6, 0x43, 0xdb, 0xee, 0x1c, 0xe4,
	0xd3, 0xfa, 0x52, 0xdb, 0x3c, 0xfd, 0xd9, 0xc0, 0xf5, 0xbf, 0xc2, 0x69, 0x8d, 0x13, 0x7f, 0x04,
	0x97, 0x5f, 0x21, 0x4b, 0x6d, 0x10, 0xdf, 0x2c, 0x02, 0x2d, 0x63, 0xfa, 0xce, 0xdb, 0xef, 0x78,
	0x06, 0x83, 0x8a, 0xe6, 0xe5, 0x3c, 0xab, 0xf1, 0xce, 0xd5, 0xb8, 0x33, 0x37, 0x40, 0xe6, 0x12,
	0x99, 0x46, 0xab, 0x2d, 0x44, 0xff, 0xf7, 0x22, 0x9e, 0x42, 0x8f, 0x62, 0x52, 0x48, 0x95, 0xdd,
	0xa1, 0x5d, 0xc7, 0x88, 0x56, 0x40, 0xfc, 0x33, 0x5c, 0x5a, 0x5a, 0x6d, 0x21, 0x63, 0xe8, 0xac,
	0x98, 0xb9, 0x56, 0x0f, 0x48, 0xf1, 0x1e, 0xf2, 0x02, 0xa2, 0xf9, 0x3e, 0xe3, 0xa9, 0xc4, 0xdc,
	0xef, 0x65, 0x9d, 0x55, 0xfa, 0x8c, 0xe8, 0x05, 0x72, 0xfc, 0x9f, 0x45, 0xbf, 0x81, 0x4b, 0x17,
	0xf5, 0xad, 0xd8, 0xb8, 0x77, 0xc9, 0x74, 0xd9, 0xec, 0x57, 0xe8, 0xb2, 0xf9, 0xb6, 0xab, 0xc0,
	0x36, 0xc8, 0xfd, 0x25, 0x74, 0x46, 0xbc, 0x84, 0x27, 0x67, 0x92, 0x7c, 0xfb, 0x3f, 0x03, 0x28,
	0x63, 0x06, 0x61, 0xef, 0xb9, 0x59, 0xff, 0x2d, 0x17, 0xad, 0x11, 0xe3, 0xdf, 0xe1, 0xc9, 0x32,
	0x53, 0x7a, 0xe1, 0xdf, 0xd6, 0x50, 0xe1, 0x10, 0xba, 0x6b, 0x63, 0x7f, 0xbd, 0xf0, 0x8a, 0x82,
	0x49, 0x3e, 0x81, 0xf6, 0x77, 0x05, 0xca, 0x93, 0x15, 0xd5, 0x9f, 0x7d, 0x30, 0x29, 0x9f, 0xe5,
	0x85, 0x48, 0x8a, 0x03, 0xe6, 0xda, 0xba, 0xa9, 0x63, 0x99, 0x46, 0xcc, 0x45, 0x91, 0xeb, 0x77,
	0x39, 0x3f, 0xf9, 0x7b, 0x52, 0x01, 0x31, 0x05, 0x12, 0x32, 0xd7, 0x06, 0xf8, 0x02, 0x5a, 0x06,
	0xf5, 0x45, 0x90, 0xfb, 0x19, 0xa8, 0xf5, 0x9f, 0x3f, 0xe5, 0xcd, 0xf0, 0x94, 0x0b, 0xb8, 0x98,
	0xef, 0x59, 0xbe, 0x2b, 0x6b, 0xb9, 0x82, 0xf6, 0x1a, 0x6f, 0x7d, 0x25, 0x4d, 0xea, 0x0c, 0x73,
	0xff, 0xb6, 0x19, 0xd7, 0x28, 0x7d, 0x77, 0xbd, 0x65, 0x2a, 0xdf, 0x72, 0xa6, 0x35, 0xe6, 0x5e,
	0x6e, 0x30, 0xcd, 0x09, 0xa5, 0x25, 0xb2, 0x83, 0xbf, 0xcb, 0xde, 0x8a, 0x7f, 0x82, 0x81, 0x4b,
	0x58, 0x2b, 0xe1, 0x15, 0x74, 0x1d, 0x16, 0xaa, 0x18, 0xb8, 0x1d, 0x59, 0x9f, 0xf2, 0xc4, 0xab,
	0xeb, 0x26, 0x8e, 0x40, 0x3e, 0x84, 0xde, 0x92, 0x29, 0x6d, 0x64, 0xa5, 0xbe, 0x94, 0x88, 0x33,
	0xa5, 0x7f, 0x51, 0x78, 0xbb, 0xe9, 0xd8, 0x1f, 0xbb, 0xd7, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff,
	0xc5, 0x5a, 0xdc, 0x56, 0x72, 0x07, 0x00, 0x00,
}
