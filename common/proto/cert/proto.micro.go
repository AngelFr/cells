// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto.proto

/*
Package cert is a generated protocol buffer package.

It is generated from these files:
	proto.proto

It has these top-level messages:
	GetCertificateRequest
	GetCertificateResponse
	Authentication
	ShareSecretAuthentication
	LicenseInfo
	StoredLicense
	AccountLicenses
	PutLicenseInfoRequest
	PutLicenseInfoResponse
	LicenseStatsRequest
	LicenseStatsResponse
	MaintainStatsRequest
	MaintainStatsResponse
*/
package cert

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/any"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CertCAService service

type CertCAServiceClient interface {
	GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...client.CallOption) (*GetCertificateResponse, error)
}

type certCAServiceClient struct {
	c           client.Client
	serviceName string
}

func NewCertCAServiceClient(serviceName string, c client.Client) CertCAServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "cert"
	}
	return &certCAServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *certCAServiceClient) GetCertificate(ctx context.Context, in *GetCertificateRequest, opts ...client.CallOption) (*GetCertificateResponse, error) {
	req := c.c.NewRequest(c.serviceName, "CertCAService.GetCertificate", in)
	out := new(GetCertificateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CertCAService service

type CertCAServiceHandler interface {
	GetCertificate(context.Context, *GetCertificateRequest, *GetCertificateResponse) error
}

func RegisterCertCAServiceHandler(s server.Server, hdlr CertCAServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&CertCAService{hdlr}, opts...))
}

type CertCAService struct {
	CertCAServiceHandler
}

func (h *CertCAService) GetCertificate(ctx context.Context, in *GetCertificateRequest, out *GetCertificateResponse) error {
	return h.CertCAServiceHandler.GetCertificate(ctx, in, out)
}

// Client API for LicensingService service

type LicensingServiceClient interface {
	PutLicenseInfo(ctx context.Context, in *PutLicenseInfoRequest, opts ...client.CallOption) (*PutLicenseInfoResponse, error)
	LicenseStats(ctx context.Context, in *LicenseStatsRequest, opts ...client.CallOption) (*LicenseStatsResponse, error)
	MaintainStats(ctx context.Context, in *MaintainStatsRequest, opts ...client.CallOption) (*MaintainStatsResponse, error)
}

type licensingServiceClient struct {
	c           client.Client
	serviceName string
}

func NewLicensingServiceClient(serviceName string, c client.Client) LicensingServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "cert"
	}
	return &licensingServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *licensingServiceClient) PutLicenseInfo(ctx context.Context, in *PutLicenseInfoRequest, opts ...client.CallOption) (*PutLicenseInfoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "LicensingService.PutLicenseInfo", in)
	out := new(PutLicenseInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licensingServiceClient) LicenseStats(ctx context.Context, in *LicenseStatsRequest, opts ...client.CallOption) (*LicenseStatsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "LicensingService.LicenseStats", in)
	out := new(LicenseStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licensingServiceClient) MaintainStats(ctx context.Context, in *MaintainStatsRequest, opts ...client.CallOption) (*MaintainStatsResponse, error) {
	req := c.c.NewRequest(c.serviceName, "LicensingService.MaintainStats", in)
	out := new(MaintainStatsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LicensingService service

type LicensingServiceHandler interface {
	PutLicenseInfo(context.Context, *PutLicenseInfoRequest, *PutLicenseInfoResponse) error
	LicenseStats(context.Context, *LicenseStatsRequest, *LicenseStatsResponse) error
	MaintainStats(context.Context, *MaintainStatsRequest, *MaintainStatsResponse) error
}

func RegisterLicensingServiceHandler(s server.Server, hdlr LicensingServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&LicensingService{hdlr}, opts...))
}

type LicensingService struct {
	LicensingServiceHandler
}

func (h *LicensingService) PutLicenseInfo(ctx context.Context, in *PutLicenseInfoRequest, out *PutLicenseInfoResponse) error {
	return h.LicensingServiceHandler.PutLicenseInfo(ctx, in, out)
}

func (h *LicensingService) LicenseStats(ctx context.Context, in *LicenseStatsRequest, out *LicenseStatsResponse) error {
	return h.LicensingServiceHandler.LicenseStats(ctx, in, out)
}

func (h *LicensingService) MaintainStats(ctx context.Context, in *MaintainStatsRequest, out *MaintainStatsResponse) error {
	return h.LicensingServiceHandler.MaintainStats(ctx, in, out)
}
