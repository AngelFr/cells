// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tree.proto

/*
Package tree is a generated protocol buffer package.

It is generated from these files:
	tree.proto

It has these top-level messages:
	ReadNodeRequest
	ReadNodeResponse
	ListNodesRequest
	ListNodesResponse
	CreateNodeRequest
	CreateNodeResponse
	UpdateNodeRequest
	UpdateNodeResponse
	DeleteNodeRequest
	DeleteNodeResponse
	IndexationSession
	IndexationOperation
	OpenSessionRequest
	OpenSessionResponse
	FlushSessionRequest
	FlushSessionResponse
	CloseSessionRequest
	CloseSessionResponse
	WatchNodeRequest
	WatchNodeResponse
	SearchRequest
	SearchResponse
	CreateVersionRequest
	CreateVersionResponse
	ListVersionsRequest
	ListVersionsResponse
	HeadVersionRequest
	HeadVersionResponse
	StoreVersionRequest
	StoreVersionResponse
	PruneVersionsRequest
	PruneVersionsResponse
	VersioningPolicy
	VersioningKeepPeriod
	Node
	WorkspaceRelativePath
	ChangeLog
	Query
	GeoQuery
	GeoPoint
	NodeChangeEvent
	IndexEvent
	GetEncryptionKeyRequest
	GetEncryptionKeyResponse
	SyncChange
	SyncChangeNode
	PutSyncChangeResponse
	SearchSyncChangeRequest
*/
package tree

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ==========================================================
// * Standard Messages
// ==========================================================
type NodeType int32

const (
	NodeType_UNKNOWN    NodeType = 0
	NodeType_LEAF       NodeType = 1
	NodeType_COLLECTION NodeType = 2
)

var NodeType_name = map[int32]string{
	0: "UNKNOWN",
	1: "LEAF",
	2: "COLLECTION",
}
var NodeType_value = map[string]int32{
	"UNKNOWN":    0,
	"LEAF":       1,
	"COLLECTION": 2,
}

func (x NodeType) String() string {
	return proto.EnumName(NodeType_name, int32(x))
}
func (NodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NodeChangeEvent_EventType int32

const (
	NodeChangeEvent_CREATE           NodeChangeEvent_EventType = 0
	NodeChangeEvent_READ             NodeChangeEvent_EventType = 1
	NodeChangeEvent_UPDATE_PATH      NodeChangeEvent_EventType = 2
	NodeChangeEvent_UPDATE_CONTENT   NodeChangeEvent_EventType = 3
	NodeChangeEvent_UPDATE_META      NodeChangeEvent_EventType = 4
	NodeChangeEvent_UPDATE_USER_META NodeChangeEvent_EventType = 6
	NodeChangeEvent_DELETE           NodeChangeEvent_EventType = 5
)

var NodeChangeEvent_EventType_name = map[int32]string{
	0: "CREATE",
	1: "READ",
	2: "UPDATE_PATH",
	3: "UPDATE_CONTENT",
	4: "UPDATE_META",
	6: "UPDATE_USER_META",
	5: "DELETE",
}
var NodeChangeEvent_EventType_value = map[string]int32{
	"CREATE":           0,
	"READ":             1,
	"UPDATE_PATH":      2,
	"UPDATE_CONTENT":   3,
	"UPDATE_META":      4,
	"UPDATE_USER_META": 6,
	"DELETE":           5,
}

func (x NodeChangeEvent_EventType) String() string {
	return proto.EnumName(NodeChangeEvent_EventType_name, int32(x))
}
func (NodeChangeEvent_EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{40, 0}
}

type SyncChange_Type int32

const (
	SyncChange_unknown SyncChange_Type = 0
	SyncChange_create  SyncChange_Type = 1
	SyncChange_delete  SyncChange_Type = 2
	SyncChange_path    SyncChange_Type = 3
	SyncChange_content SyncChange_Type = 4
)

var SyncChange_Type_name = map[int32]string{
	0: "unknown",
	1: "create",
	2: "delete",
	3: "path",
	4: "content",
}
var SyncChange_Type_value = map[string]int32{
	"unknown": 0,
	"create":  1,
	"delete":  2,
	"path":    3,
	"content": 4,
}

func (x SyncChange_Type) String() string {
	return proto.EnumName(SyncChange_Type_name, int32(x))
}
func (SyncChange_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{44, 0} }

// Request / Responses Messages
type ReadNodeRequest struct {
	// Input node
	Node *Node `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
	// Gather commit information
	WithCommits bool `protobuf:"varint,2,opt,name=WithCommits" json:"WithCommits,omitempty"`
	// Get extended stats - For folders, computes ChildrenCount
	WithExtendedStats bool `protobuf:"varint,3,opt,name=WithExtendedStats" json:"WithExtendedStats,omitempty"`
	// Used internally for the router ReadNode request, stat the datasource instead of index
	ObjectStats bool `protobuf:"varint,4,opt,name=ObjectStats" json:"ObjectStats,omitempty"`
}

func (m *ReadNodeRequest) Reset()                    { *m = ReadNodeRequest{} }
func (m *ReadNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadNodeRequest) ProtoMessage()               {}
func (*ReadNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReadNodeRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *ReadNodeRequest) GetWithCommits() bool {
	if m != nil {
		return m.WithCommits
	}
	return false
}

func (m *ReadNodeRequest) GetWithExtendedStats() bool {
	if m != nil {
		return m.WithExtendedStats
	}
	return false
}

func (m *ReadNodeRequest) GetObjectStats() bool {
	if m != nil {
		return m.ObjectStats
	}
	return false
}

type ReadNodeResponse struct {
	Success bool  `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	Node    *Node `protobuf:"bytes,2,opt,name=Node" json:"Node,omitempty"`
}

func (m *ReadNodeResponse) Reset()                    { *m = ReadNodeResponse{} }
func (m *ReadNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadNodeResponse) ProtoMessage()               {}
func (*ReadNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReadNodeResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ReadNodeResponse) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type ListNodesRequest struct {
	Node         *Node    `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
	Recursive    bool     `protobuf:"varint,2,opt,name=Recursive" json:"Recursive,omitempty"`
	Ancestors    bool     `protobuf:"varint,3,opt,name=Ancestors" json:"Ancestors,omitempty"`
	WithVersions bool     `protobuf:"varint,7,opt,name=WithVersions" json:"WithVersions,omitempty"`
	WithCommits  bool     `protobuf:"varint,8,opt,name=WithCommits" json:"WithCommits,omitempty"`
	Limit        int64    `protobuf:"varint,4,opt,name=Limit" json:"Limit,omitempty"`
	Offset       int64    `protobuf:"varint,5,opt,name=Offset" json:"Offset,omitempty"`
	FilterType   NodeType `protobuf:"varint,6,opt,name=FilterType,enum=tree.NodeType" json:"FilterType,omitempty"`
}

func (m *ListNodesRequest) Reset()                    { *m = ListNodesRequest{} }
func (m *ListNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListNodesRequest) ProtoMessage()               {}
func (*ListNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListNodesRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *ListNodesRequest) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

func (m *ListNodesRequest) GetAncestors() bool {
	if m != nil {
		return m.Ancestors
	}
	return false
}

func (m *ListNodesRequest) GetWithVersions() bool {
	if m != nil {
		return m.WithVersions
	}
	return false
}

func (m *ListNodesRequest) GetWithCommits() bool {
	if m != nil {
		return m.WithCommits
	}
	return false
}

func (m *ListNodesRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListNodesRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListNodesRequest) GetFilterType() NodeType {
	if m != nil {
		return m.FilterType
	}
	return NodeType_UNKNOWN
}

type ListNodesResponse struct {
	Node *Node `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
}

func (m *ListNodesResponse) Reset()                    { *m = ListNodesResponse{} }
func (m *ListNodesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListNodesResponse) ProtoMessage()               {}
func (*ListNodesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListNodesResponse) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

// Request / Responses Messages
type CreateNodeRequest struct {
	Node              *Node  `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
	UpdateIfExists    bool   `protobuf:"varint,2,opt,name=UpdateIfExists" json:"UpdateIfExists,omitempty"`
	IndexationSession string `protobuf:"bytes,3,opt,name=IndexationSession" json:"IndexationSession,omitempty"`
	Silent            bool   `protobuf:"varint,4,opt,name=Silent" json:"Silent,omitempty"`
}

func (m *CreateNodeRequest) Reset()                    { *m = CreateNodeRequest{} }
func (m *CreateNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNodeRequest) ProtoMessage()               {}
func (*CreateNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateNodeRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *CreateNodeRequest) GetUpdateIfExists() bool {
	if m != nil {
		return m.UpdateIfExists
	}
	return false
}

func (m *CreateNodeRequest) GetIndexationSession() string {
	if m != nil {
		return m.IndexationSession
	}
	return ""
}

func (m *CreateNodeRequest) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

type CreateNodeResponse struct {
	Success bool  `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	Node    *Node `protobuf:"bytes,2,opt,name=Node" json:"Node,omitempty"`
}

func (m *CreateNodeResponse) Reset()                    { *m = CreateNodeResponse{} }
func (m *CreateNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateNodeResponse) ProtoMessage()               {}
func (*CreateNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateNodeResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CreateNodeResponse) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type UpdateNodeRequest struct {
	From              *Node  `protobuf:"bytes,1,opt,name=From" json:"From,omitempty"`
	To                *Node  `protobuf:"bytes,2,opt,name=To" json:"To,omitempty"`
	IndexationSession string `protobuf:"bytes,3,opt,name=IndexationSession" json:"IndexationSession,omitempty"`
	Silent            bool   `protobuf:"varint,4,opt,name=Silent" json:"Silent,omitempty"`
}

func (m *UpdateNodeRequest) Reset()                    { *m = UpdateNodeRequest{} }
func (m *UpdateNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateNodeRequest) ProtoMessage()               {}
func (*UpdateNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateNodeRequest) GetFrom() *Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *UpdateNodeRequest) GetTo() *Node {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *UpdateNodeRequest) GetIndexationSession() string {
	if m != nil {
		return m.IndexationSession
	}
	return ""
}

func (m *UpdateNodeRequest) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

type UpdateNodeResponse struct {
	Success bool  `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	Node    *Node `protobuf:"bytes,2,opt,name=Node" json:"Node,omitempty"`
}

func (m *UpdateNodeResponse) Reset()                    { *m = UpdateNodeResponse{} }
func (m *UpdateNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateNodeResponse) ProtoMessage()               {}
func (*UpdateNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateNodeResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *UpdateNodeResponse) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type DeleteNodeRequest struct {
	Node              *Node  `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
	IndexationSession string `protobuf:"bytes,2,opt,name=IndexationSession" json:"IndexationSession,omitempty"`
	Silent            bool   `protobuf:"varint,3,opt,name=Silent" json:"Silent,omitempty"`
}

func (m *DeleteNodeRequest) Reset()                    { *m = DeleteNodeRequest{} }
func (m *DeleteNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodeRequest) ProtoMessage()               {}
func (*DeleteNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteNodeRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *DeleteNodeRequest) GetIndexationSession() string {
	if m != nil {
		return m.IndexationSession
	}
	return ""
}

func (m *DeleteNodeRequest) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

type DeleteNodeResponse struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *DeleteNodeResponse) Reset()                    { *m = DeleteNodeResponse{} }
func (m *DeleteNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteNodeResponse) ProtoMessage()               {}
func (*DeleteNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteNodeResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type IndexationSession struct {
	Uuid                    string `protobuf:"bytes,1,opt,name=Uuid" json:"Uuid,omitempty"`
	Description             string `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
	RootNode                *Node  `protobuf:"bytes,3,opt,name=RootNode" json:"RootNode,omitempty"`
	ExpectedOperationsCount int64  `protobuf:"varint,4,opt,name=ExpectedOperationsCount" json:"ExpectedOperationsCount,omitempty"`
	CurrentOperationCount   int64  `protobuf:"varint,5,opt,name=CurrentOperationCount" json:"CurrentOperationCount,omitempty"`
}

func (m *IndexationSession) Reset()                    { *m = IndexationSession{} }
func (m *IndexationSession) String() string            { return proto.CompactTextString(m) }
func (*IndexationSession) ProtoMessage()               {}
func (*IndexationSession) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *IndexationSession) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *IndexationSession) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *IndexationSession) GetRootNode() *Node {
	if m != nil {
		return m.RootNode
	}
	return nil
}

func (m *IndexationSession) GetExpectedOperationsCount() int64 {
	if m != nil {
		return m.ExpectedOperationsCount
	}
	return 0
}

func (m *IndexationSession) GetCurrentOperationCount() int64 {
	if m != nil {
		return m.CurrentOperationCount
	}
	return 0
}

type IndexationOperation struct {
	SessionUuid string `protobuf:"bytes,1,opt,name=SessionUuid" json:"SessionUuid,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
	Cursor      int64  `protobuf:"varint,3,opt,name=Cursor" json:"Cursor,omitempty"`
}

func (m *IndexationOperation) Reset()                    { *m = IndexationOperation{} }
func (m *IndexationOperation) String() string            { return proto.CompactTextString(m) }
func (*IndexationOperation) ProtoMessage()               {}
func (*IndexationOperation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *IndexationOperation) GetSessionUuid() string {
	if m != nil {
		return m.SessionUuid
	}
	return ""
}

func (m *IndexationOperation) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *IndexationOperation) GetCursor() int64 {
	if m != nil {
		return m.Cursor
	}
	return 0
}

type OpenSessionRequest struct {
	Session *IndexationSession `protobuf:"bytes,1,opt,name=Session" json:"Session,omitempty"`
}

func (m *OpenSessionRequest) Reset()                    { *m = OpenSessionRequest{} }
func (m *OpenSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenSessionRequest) ProtoMessage()               {}
func (*OpenSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *OpenSessionRequest) GetSession() *IndexationSession {
	if m != nil {
		return m.Session
	}
	return nil
}

type OpenSessionResponse struct {
	Session *IndexationSession `protobuf:"bytes,1,opt,name=Session" json:"Session,omitempty"`
}

func (m *OpenSessionResponse) Reset()                    { *m = OpenSessionResponse{} }
func (m *OpenSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*OpenSessionResponse) ProtoMessage()               {}
func (*OpenSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *OpenSessionResponse) GetSession() *IndexationSession {
	if m != nil {
		return m.Session
	}
	return nil
}

type FlushSessionRequest struct {
	Session *IndexationSession `protobuf:"bytes,1,opt,name=Session" json:"Session,omitempty"`
}

func (m *FlushSessionRequest) Reset()                    { *m = FlushSessionRequest{} }
func (m *FlushSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*FlushSessionRequest) ProtoMessage()               {}
func (*FlushSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *FlushSessionRequest) GetSession() *IndexationSession {
	if m != nil {
		return m.Session
	}
	return nil
}

type FlushSessionResponse struct {
	Session *IndexationSession `protobuf:"bytes,1,opt,name=Session" json:"Session,omitempty"`
}

func (m *FlushSessionResponse) Reset()                    { *m = FlushSessionResponse{} }
func (m *FlushSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*FlushSessionResponse) ProtoMessage()               {}
func (*FlushSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *FlushSessionResponse) GetSession() *IndexationSession {
	if m != nil {
		return m.Session
	}
	return nil
}

type CloseSessionRequest struct {
	Session *IndexationSession `protobuf:"bytes,1,opt,name=Session" json:"Session,omitempty"`
}

func (m *CloseSessionRequest) Reset()                    { *m = CloseSessionRequest{} }
func (m *CloseSessionRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseSessionRequest) ProtoMessage()               {}
func (*CloseSessionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *CloseSessionRequest) GetSession() *IndexationSession {
	if m != nil {
		return m.Session
	}
	return nil
}

type CloseSessionResponse struct {
	Session *IndexationSession `protobuf:"bytes,1,opt,name=Session" json:"Session,omitempty"`
}

func (m *CloseSessionResponse) Reset()                    { *m = CloseSessionResponse{} }
func (m *CloseSessionResponse) String() string            { return proto.CompactTextString(m) }
func (*CloseSessionResponse) ProtoMessage()               {}
func (*CloseSessionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *CloseSessionResponse) GetSession() *IndexationSession {
	if m != nil {
		return m.Session
	}
	return nil
}

// Request / Responses Messages
type WatchNodeRequest struct {
	Node *Node `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
}

func (m *WatchNodeRequest) Reset()                    { *m = WatchNodeRequest{} }
func (m *WatchNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*WatchNodeRequest) ProtoMessage()               {}
func (*WatchNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *WatchNodeRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type WatchNodeResponse struct {
	Node *Node `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
}

func (m *WatchNodeResponse) Reset()                    { *m = WatchNodeResponse{} }
func (m *WatchNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*WatchNodeResponse) ProtoMessage()               {}
func (*WatchNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *WatchNodeResponse) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type SearchRequest struct {
	// The query object
	Query *Query `protobuf:"bytes,1,opt,name=Query" json:"Query,omitempty"`
	// Limit the number of results
	Size int32 `protobuf:"varint,2,opt,name=Size" json:"Size,omitempty"`
	// Start at given position
	From int32 `protobuf:"varint,3,opt,name=From" json:"From,omitempty"`
	// Load node details
	Details bool `protobuf:"varint,4,opt,name=Details" json:"Details,omitempty"`
	// Facet search
	Facet string `protobuf:"bytes,5,opt,name=Facet" json:"Facet,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *SearchRequest) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *SearchRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *SearchRequest) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *SearchRequest) GetDetails() bool {
	if m != nil {
		return m.Details
	}
	return false
}

func (m *SearchRequest) GetFacet() string {
	if m != nil {
		return m.Facet
	}
	return ""
}

type SearchResponse struct {
	Node *Node `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *SearchResponse) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type CreateVersionRequest struct {
	Node         *Node            `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
	TriggerEvent *NodeChangeEvent `protobuf:"bytes,2,opt,name=TriggerEvent" json:"TriggerEvent,omitempty"`
}

func (m *CreateVersionRequest) Reset()                    { *m = CreateVersionRequest{} }
func (m *CreateVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateVersionRequest) ProtoMessage()               {}
func (*CreateVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CreateVersionRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *CreateVersionRequest) GetTriggerEvent() *NodeChangeEvent {
	if m != nil {
		return m.TriggerEvent
	}
	return nil
}

type CreateVersionResponse struct {
	Version *ChangeLog `protobuf:"bytes,1,opt,name=Version" json:"Version,omitempty"`
}

func (m *CreateVersionResponse) Reset()                    { *m = CreateVersionResponse{} }
func (m *CreateVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateVersionResponse) ProtoMessage()               {}
func (*CreateVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CreateVersionResponse) GetVersion() *ChangeLog {
	if m != nil {
		return m.Version
	}
	return nil
}

type ListVersionsRequest struct {
	Node *Node `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
}

func (m *ListVersionsRequest) Reset()                    { *m = ListVersionsRequest{} }
func (m *ListVersionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListVersionsRequest) ProtoMessage()               {}
func (*ListVersionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ListVersionsRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

type ListVersionsResponse struct {
	Version *ChangeLog `protobuf:"bytes,1,opt,name=Version" json:"Version,omitempty"`
}

func (m *ListVersionsResponse) Reset()                    { *m = ListVersionsResponse{} }
func (m *ListVersionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListVersionsResponse) ProtoMessage()               {}
func (*ListVersionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ListVersionsResponse) GetVersion() *ChangeLog {
	if m != nil {
		return m.Version
	}
	return nil
}

type HeadVersionRequest struct {
	Node      *Node  `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
	VersionId string `protobuf:"bytes,2,opt,name=VersionId" json:"VersionId,omitempty"`
}

func (m *HeadVersionRequest) Reset()                    { *m = HeadVersionRequest{} }
func (m *HeadVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*HeadVersionRequest) ProtoMessage()               {}
func (*HeadVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *HeadVersionRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *HeadVersionRequest) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

type HeadVersionResponse struct {
	Version *ChangeLog `protobuf:"bytes,1,opt,name=Version" json:"Version,omitempty"`
}

func (m *HeadVersionResponse) Reset()                    { *m = HeadVersionResponse{} }
func (m *HeadVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*HeadVersionResponse) ProtoMessage()               {}
func (*HeadVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *HeadVersionResponse) GetVersion() *ChangeLog {
	if m != nil {
		return m.Version
	}
	return nil
}

type StoreVersionRequest struct {
	Node    *Node      `protobuf:"bytes,1,opt,name=Node" json:"Node,omitempty"`
	Version *ChangeLog `protobuf:"bytes,2,opt,name=Version" json:"Version,omitempty"`
}

func (m *StoreVersionRequest) Reset()                    { *m = StoreVersionRequest{} }
func (m *StoreVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreVersionRequest) ProtoMessage()               {}
func (*StoreVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *StoreVersionRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *StoreVersionRequest) GetVersion() *ChangeLog {
	if m != nil {
		return m.Version
	}
	return nil
}

type StoreVersionResponse struct {
	Success       bool         `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	PruneVersions []*ChangeLog `protobuf:"bytes,2,rep,name=PruneVersions" json:"PruneVersions,omitempty"`
}

func (m *StoreVersionResponse) Reset()                    { *m = StoreVersionResponse{} }
func (m *StoreVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*StoreVersionResponse) ProtoMessage()               {}
func (*StoreVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *StoreVersionResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *StoreVersionResponse) GetPruneVersions() []*ChangeLog {
	if m != nil {
		return m.PruneVersions
	}
	return nil
}

type PruneVersionsRequest struct {
	UniqueNode      *Node `protobuf:"bytes,1,opt,name=UniqueNode" json:"UniqueNode,omitempty"`
	AllDeletedNodes bool  `protobuf:"varint,2,opt,name=AllDeletedNodes" json:"AllDeletedNodes,omitempty"`
}

func (m *PruneVersionsRequest) Reset()                    { *m = PruneVersionsRequest{} }
func (m *PruneVersionsRequest) String() string            { return proto.CompactTextString(m) }
func (*PruneVersionsRequest) ProtoMessage()               {}
func (*PruneVersionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *PruneVersionsRequest) GetUniqueNode() *Node {
	if m != nil {
		return m.UniqueNode
	}
	return nil
}

func (m *PruneVersionsRequest) GetAllDeletedNodes() bool {
	if m != nil {
		return m.AllDeletedNodes
	}
	return false
}

type PruneVersionsResponse struct {
	DeletedVersions []string `protobuf:"bytes,1,rep,name=DeletedVersions" json:"DeletedVersions,omitempty"`
}

func (m *PruneVersionsResponse) Reset()                    { *m = PruneVersionsResponse{} }
func (m *PruneVersionsResponse) String() string            { return proto.CompactTextString(m) }
func (*PruneVersionsResponse) ProtoMessage()               {}
func (*PruneVersionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *PruneVersionsResponse) GetDeletedVersions() []string {
	if m != nil {
		return m.DeletedVersions
	}
	return nil
}

type VersioningPolicy struct {
	Uuid                     string                  `protobuf:"bytes,1,opt,name=Uuid" json:"Uuid,omitempty"`
	Name                     string                  `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Description              string                  `protobuf:"bytes,3,opt,name=Description" json:"Description,omitempty"`
	VersionsDataSourceName   string                  `protobuf:"bytes,4,opt,name=VersionsDataSourceName" json:"VersionsDataSourceName,omitempty"`
	VersionsDataSourceBucket string                  `protobuf:"bytes,5,opt,name=VersionsDataSourceBucket" json:"VersionsDataSourceBucket,omitempty"`
	MaxTotalSize             int64                   `protobuf:"varint,6,opt,name=MaxTotalSize" json:"MaxTotalSize,omitempty"`
	MaxSizePerFile           int64                   `protobuf:"varint,7,opt,name=MaxSizePerFile" json:"MaxSizePerFile,omitempty"`
	IgnoreFilesGreaterThan   int64                   `protobuf:"varint,8,opt,name=IgnoreFilesGreaterThan" json:"IgnoreFilesGreaterThan,omitempty"`
	KeepPeriods              []*VersioningKeepPeriod `protobuf:"bytes,9,rep,name=KeepPeriods" json:"KeepPeriods,omitempty"`
}

func (m *VersioningPolicy) Reset()                    { *m = VersioningPolicy{} }
func (m *VersioningPolicy) String() string            { return proto.CompactTextString(m) }
func (*VersioningPolicy) ProtoMessage()               {}
func (*VersioningPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *VersioningPolicy) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *VersioningPolicy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VersioningPolicy) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *VersioningPolicy) GetVersionsDataSourceName() string {
	if m != nil {
		return m.VersionsDataSourceName
	}
	return ""
}

func (m *VersioningPolicy) GetVersionsDataSourceBucket() string {
	if m != nil {
		return m.VersionsDataSourceBucket
	}
	return ""
}

func (m *VersioningPolicy) GetMaxTotalSize() int64 {
	if m != nil {
		return m.MaxTotalSize
	}
	return 0
}

func (m *VersioningPolicy) GetMaxSizePerFile() int64 {
	if m != nil {
		return m.MaxSizePerFile
	}
	return 0
}

func (m *VersioningPolicy) GetIgnoreFilesGreaterThan() int64 {
	if m != nil {
		return m.IgnoreFilesGreaterThan
	}
	return 0
}

func (m *VersioningPolicy) GetKeepPeriods() []*VersioningKeepPeriod {
	if m != nil {
		return m.KeepPeriods
	}
	return nil
}

type VersioningKeepPeriod struct {
	IntervalStart string `protobuf:"bytes,1,opt,name=IntervalStart" json:"IntervalStart,omitempty"`
	MaxNumber     int32  `protobuf:"varint,3,opt,name=MaxNumber" json:"MaxNumber,omitempty"`
}

func (m *VersioningKeepPeriod) Reset()                    { *m = VersioningKeepPeriod{} }
func (m *VersioningKeepPeriod) String() string            { return proto.CompactTextString(m) }
func (*VersioningKeepPeriod) ProtoMessage()               {}
func (*VersioningKeepPeriod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *VersioningKeepPeriod) GetIntervalStart() string {
	if m != nil {
		return m.IntervalStart
	}
	return ""
}

func (m *VersioningKeepPeriod) GetMaxNumber() int32 {
	if m != nil {
		return m.MaxNumber
	}
	return 0
}

type Node struct {
	// ------------------------------------
	// Core identification of the node
	// ------------------------------------
	Uuid string   `protobuf:"bytes,1,opt,name=Uuid" json:"Uuid,omitempty"`
	Path string   `protobuf:"bytes,2,opt,name=Path" json:"Path,omitempty"`
	Type NodeType `protobuf:"varint,3,opt,name=Type,enum=tree.NodeType" json:"Type,omitempty"`
	// Size of the file, or cumulated size of folder
	Size int64 `protobuf:"varint,4,opt,name=Size" json:"Size,omitempty"`
	// Last modification Timestamp
	MTime int64 `protobuf:"varint,5,opt,name=MTime" json:"MTime,omitempty"`
	// Permission mode, like 0777
	Mode int32 `protobuf:"varint,6,opt,name=Mode" json:"Mode,omitempty"`
	// Hash of the content if node is a LEAF, Uuid or
	Etag string `protobuf:"bytes,7,opt,name=Etag" json:"Etag,omitempty"`
	// List of successive commits
	Commits []*ChangeLog `protobuf:"bytes,9,rep,name=Commits" json:"Commits,omitempty"`
	// ------------------------------------
	// Then a free K => V representation of any kind of metadata
	// ------------------------------------
	MetaStore map[string]string `protobuf:"bytes,8,rep,name=MetaStore" json:"MetaStore,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Can be used for output when node is appearing in multiple workspaces
	AppearsIn []*WorkspaceRelativePath `protobuf:"bytes,10,rep,name=AppearsIn" json:"AppearsIn,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *Node) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Node) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Node) GetType() NodeType {
	if m != nil {
		return m.Type
	}
	return NodeType_UNKNOWN
}

func (m *Node) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Node) GetMTime() int64 {
	if m != nil {
		return m.MTime
	}
	return 0
}

func (m *Node) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *Node) GetEtag() string {
	if m != nil {
		return m.Etag
	}
	return ""
}

func (m *Node) GetCommits() []*ChangeLog {
	if m != nil {
		return m.Commits
	}
	return nil
}

func (m *Node) GetMetaStore() map[string]string {
	if m != nil {
		return m.MetaStore
	}
	return nil
}

func (m *Node) GetAppearsIn() []*WorkspaceRelativePath {
	if m != nil {
		return m.AppearsIn
	}
	return nil
}

// Used in AppearsIn to signal a node is
// appearing in multiple workspaces in the current context
type WorkspaceRelativePath struct {
	// Workspace Id
	WsUuid string `protobuf:"bytes,1,opt,name=WsUuid" json:"WsUuid,omitempty"`
	// Workspace Label
	WsLabel string `protobuf:"bytes,2,opt,name=WsLabel" json:"WsLabel,omitempty"`
	// Relative Path inside workspace
	Path string `protobuf:"bytes,3,opt,name=Path" json:"Path,omitempty"`
}

func (m *WorkspaceRelativePath) Reset()                    { *m = WorkspaceRelativePath{} }
func (m *WorkspaceRelativePath) String() string            { return proto.CompactTextString(m) }
func (*WorkspaceRelativePath) ProtoMessage()               {}
func (*WorkspaceRelativePath) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *WorkspaceRelativePath) GetWsUuid() string {
	if m != nil {
		return m.WsUuid
	}
	return ""
}

func (m *WorkspaceRelativePath) GetWsLabel() string {
	if m != nil {
		return m.WsLabel
	}
	return ""
}

func (m *WorkspaceRelativePath) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type ChangeLog struct {
	// Unique commit ID
	Uuid string `protobuf:"bytes,1,opt,name=Uuid" json:"Uuid,omitempty"`
	// Human-readable description of what happened
	Description string `protobuf:"bytes,2,opt,name=Description" json:"Description,omitempty"`
	// Unix Timestamp
	MTime int64 `protobuf:"varint,3,opt,name=MTime" json:"MTime,omitempty"`
	// Content Size at that moment
	Size int64 `protobuf:"varint,4,opt,name=Size" json:"Size,omitempty"`
	// Arbitrary additional data
	Data []byte `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
	// Who performed this action
	OwnerUuid string `protobuf:"bytes,6,opt,name=OwnerUuid" json:"OwnerUuid,omitempty"`
	// Event that triggered this change
	Event *NodeChangeEvent `protobuf:"bytes,7,opt,name=Event" json:"Event,omitempty"`
}

func (m *ChangeLog) Reset()                    { *m = ChangeLog{} }
func (m *ChangeLog) String() string            { return proto.CompactTextString(m) }
func (*ChangeLog) ProtoMessage()               {}
func (*ChangeLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *ChangeLog) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ChangeLog) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ChangeLog) GetMTime() int64 {
	if m != nil {
		return m.MTime
	}
	return 0
}

func (m *ChangeLog) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *ChangeLog) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ChangeLog) GetOwnerUuid() string {
	if m != nil {
		return m.OwnerUuid
	}
	return ""
}

func (m *ChangeLog) GetEvent() *NodeChangeEvent {
	if m != nil {
		return m.Event
	}
	return nil
}

// Search Queries
type Query struct {
	// Limit to a given subtree
	PathPrefix []string `protobuf:"bytes,1,rep,name=PathPrefix" json:"PathPrefix,omitempty"`
	// Range for size
	MinSize int64 `protobuf:"varint,2,opt,name=MinSize" json:"MinSize,omitempty"`
	MaxSize int64 `protobuf:"varint,3,opt,name=MaxSize" json:"MaxSize,omitempty"`
	// Range for date
	MinDate int64 `protobuf:"varint,4,opt,name=MinDate" json:"MinDate,omitempty"`
	MaxDate int64 `protobuf:"varint,5,opt,name=MaxDate" json:"MaxDate,omitempty"`
	// Limit to a given node type
	Type NodeType `protobuf:"varint,6,opt,name=Type,enum=tree.NodeType" json:"Type,omitempty"`
	// Search in filename
	FileName string `protobuf:"bytes,7,opt,name=FileName" json:"FileName,omitempty"`
	// Search in content
	Content string `protobuf:"bytes,8,opt,name=Content" json:"Content,omitempty"`
	// Free Query String (for metadata)
	FreeString string `protobuf:"bytes,9,opt,name=FreeString" json:"FreeString,omitempty"`
	// Search files by extension
	Extension string `protobuf:"bytes,10,opt,name=Extension" json:"Extension,omitempty"`
	// Search geographically
	GeoQuery *GeoQuery `protobuf:"bytes,11,opt,name=GeoQuery" json:"GeoQuery,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *Query) GetPathPrefix() []string {
	if m != nil {
		return m.PathPrefix
	}
	return nil
}

func (m *Query) GetMinSize() int64 {
	if m != nil {
		return m.MinSize
	}
	return 0
}

func (m *Query) GetMaxSize() int64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

func (m *Query) GetMinDate() int64 {
	if m != nil {
		return m.MinDate
	}
	return 0
}

func (m *Query) GetMaxDate() int64 {
	if m != nil {
		return m.MaxDate
	}
	return 0
}

func (m *Query) GetType() NodeType {
	if m != nil {
		return m.Type
	}
	return NodeType_UNKNOWN
}

func (m *Query) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *Query) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Query) GetFreeString() string {
	if m != nil {
		return m.FreeString
	}
	return ""
}

func (m *Query) GetExtension() string {
	if m != nil {
		return m.Extension
	}
	return ""
}

func (m *Query) GetGeoQuery() *GeoQuery {
	if m != nil {
		return m.GeoQuery
	}
	return nil
}

type GeoQuery struct {
	// Either use a center point and a distance
	Center *GeoPoint `protobuf:"bytes,1,opt,name=Center" json:"Center,omitempty"`
	// Example formats supported:
	// "5in" "5inch" "7yd" "7yards" "9ft" "9feet" "11km" "11kilometers"
	// "3nm" "3nauticalmiles" "13mm" "13millimeters" "15cm" "15centimeters"
	// "17mi" "17miles" "19m" "19meters"
	// If the unit cannot be determined, the entire string is parsed and the
	// unit of meters is assumed.
	Distance string `protobuf:"bytes,2,opt,name=Distance" json:"Distance,omitempty"`
	// Or use a bounding box with TopLeft and BottomRight points
	TopLeft     *GeoPoint `protobuf:"bytes,3,opt,name=TopLeft" json:"TopLeft,omitempty"`
	BottomRight *GeoPoint `protobuf:"bytes,4,opt,name=BottomRight" json:"BottomRight,omitempty"`
}

func (m *GeoQuery) Reset()                    { *m = GeoQuery{} }
func (m *GeoQuery) String() string            { return proto.CompactTextString(m) }
func (*GeoQuery) ProtoMessage()               {}
func (*GeoQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *GeoQuery) GetCenter() *GeoPoint {
	if m != nil {
		return m.Center
	}
	return nil
}

func (m *GeoQuery) GetDistance() string {
	if m != nil {
		return m.Distance
	}
	return ""
}

func (m *GeoQuery) GetTopLeft() *GeoPoint {
	if m != nil {
		return m.TopLeft
	}
	return nil
}

func (m *GeoQuery) GetBottomRight() *GeoPoint {
	if m != nil {
		return m.BottomRight
	}
	return nil
}

type GeoPoint struct {
	Lat float64 `protobuf:"fixed64,1,opt,name=Lat" json:"Lat,omitempty"`
	Lon float64 `protobuf:"fixed64,2,opt,name=Lon" json:"Lon,omitempty"`
}

func (m *GeoPoint) Reset()                    { *m = GeoPoint{} }
func (m *GeoPoint) String() string            { return proto.CompactTextString(m) }
func (*GeoPoint) ProtoMessage()               {}
func (*GeoPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *GeoPoint) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *GeoPoint) GetLon() float64 {
	if m != nil {
		return m.Lon
	}
	return 0
}

type NodeChangeEvent struct {
	Type   NodeChangeEvent_EventType `protobuf:"varint,1,opt,name=Type,enum=tree.NodeChangeEvent_EventType" json:"Type,omitempty"`
	Source *Node                     `protobuf:"bytes,2,opt,name=Source" json:"Source,omitempty"`
	Target *Node                     `protobuf:"bytes,3,opt,name=Target" json:"Target,omitempty"`
	Silent bool                      `protobuf:"varint,4,opt,name=Silent" json:"Silent,omitempty"`
}

func (m *NodeChangeEvent) Reset()                    { *m = NodeChangeEvent{} }
func (m *NodeChangeEvent) String() string            { return proto.CompactTextString(m) }
func (*NodeChangeEvent) ProtoMessage()               {}
func (*NodeChangeEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *NodeChangeEvent) GetType() NodeChangeEvent_EventType {
	if m != nil {
		return m.Type
	}
	return NodeChangeEvent_CREATE
}

func (m *NodeChangeEvent) GetSource() *Node {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *NodeChangeEvent) GetTarget() *Node {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *NodeChangeEvent) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

type IndexEvent struct {
	ErrorDetected     bool   `protobuf:"varint,1,opt,name=ErrorDetected" json:"ErrorDetected,omitempty"`
	DataSourceName    string `protobuf:"bytes,2,opt,name=DataSourceName" json:"DataSourceName,omitempty"`
	ErrorPath         string `protobuf:"bytes,3,opt,name=ErrorPath" json:"ErrorPath,omitempty"`
	SessionForceClose string `protobuf:"bytes,4,opt,name=SessionForceClose" json:"SessionForceClose,omitempty"`
}

func (m *IndexEvent) Reset()                    { *m = IndexEvent{} }
func (m *IndexEvent) String() string            { return proto.CompactTextString(m) }
func (*IndexEvent) ProtoMessage()               {}
func (*IndexEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *IndexEvent) GetErrorDetected() bool {
	if m != nil {
		return m.ErrorDetected
	}
	return false
}

func (m *IndexEvent) GetDataSourceName() string {
	if m != nil {
		return m.DataSourceName
	}
	return ""
}

func (m *IndexEvent) GetErrorPath() string {
	if m != nil {
		return m.ErrorPath
	}
	return ""
}

func (m *IndexEvent) GetSessionForceClose() string {
	if m != nil {
		return m.SessionForceClose
	}
	return ""
}

type GetEncryptionKeyRequest struct {
	User     string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=Password" json:"Password,omitempty"`
	Node     *Node  `protobuf:"bytes,3,opt,name=Node" json:"Node,omitempty"`
	Create   bool   `protobuf:"varint,5,opt,name=Create" json:"Create,omitempty"`
}

func (m *GetEncryptionKeyRequest) Reset()                    { *m = GetEncryptionKeyRequest{} }
func (m *GetEncryptionKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEncryptionKeyRequest) ProtoMessage()               {}
func (*GetEncryptionKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *GetEncryptionKeyRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *GetEncryptionKeyRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *GetEncryptionKeyRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *GetEncryptionKeyRequest) GetCreate() bool {
	if m != nil {
		return m.Create
	}
	return false
}

type GetEncryptionKeyResponse struct {
	Key []byte `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (m *GetEncryptionKeyResponse) Reset()                    { *m = GetEncryptionKeyResponse{} }
func (m *GetEncryptionKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*GetEncryptionKeyResponse) ProtoMessage()               {}
func (*GetEncryptionKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *GetEncryptionKeyResponse) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type SyncChange struct {
	Seq    uint64          `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	NodeId string          `protobuf:"bytes,2,opt,name=nodeId,json=node_id" json:"nodeId,omitempty"`
	Type   SyncChange_Type `protobuf:"varint,3,opt,name=type,enum=tree.SyncChange_Type" json:"type,omitempty"`
	Source string          `protobuf:"bytes,4,opt,name=source" json:"source,omitempty"`
	Target string          `protobuf:"bytes,5,opt,name=target" json:"target,omitempty"`
	Node   *SyncChangeNode `protobuf:"bytes,6,opt,name=node" json:"node,omitempty"`
}

func (m *SyncChange) Reset()                    { *m = SyncChange{} }
func (m *SyncChange) String() string            { return proto.CompactTextString(m) }
func (*SyncChange) ProtoMessage()               {}
func (*SyncChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *SyncChange) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *SyncChange) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *SyncChange) GetType() SyncChange_Type {
	if m != nil {
		return m.Type
	}
	return SyncChange_unknown
}

func (m *SyncChange) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *SyncChange) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *SyncChange) GetNode() *SyncChangeNode {
	if m != nil {
		return m.Node
	}
	return nil
}

type SyncChangeNode struct {
	Bytesize             int64  `protobuf:"varint,1,opt,name=bytesize" json:"bytesize,omitempty"`
	Md5                  string `protobuf:"bytes,2,opt,name=md5" json:"md5,omitempty"`
	Mtime                int64  `protobuf:"varint,3,opt,name=mtime" json:"mtime,omitempty"`
	NodePath             string `protobuf:"bytes,4,opt,name=nodePath,json=node_path" json:"nodePath,omitempty"`
	RepositoryIdentifier string `protobuf:"bytes,5,opt,name=repositoryIdentifier,json=repository_identifier" json:"repositoryIdentifier,omitempty"`
}

func (m *SyncChangeNode) Reset()                    { *m = SyncChangeNode{} }
func (m *SyncChangeNode) String() string            { return proto.CompactTextString(m) }
func (*SyncChangeNode) ProtoMessage()               {}
func (*SyncChangeNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *SyncChangeNode) GetBytesize() int64 {
	if m != nil {
		return m.Bytesize
	}
	return 0
}

func (m *SyncChangeNode) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

func (m *SyncChangeNode) GetMtime() int64 {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func (m *SyncChangeNode) GetNodePath() string {
	if m != nil {
		return m.NodePath
	}
	return ""
}

func (m *SyncChangeNode) GetRepositoryIdentifier() string {
	if m != nil {
		return m.RepositoryIdentifier
	}
	return ""
}

type PutSyncChangeResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Msg     string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *PutSyncChangeResponse) Reset()                    { *m = PutSyncChangeResponse{} }
func (m *PutSyncChangeResponse) String() string            { return proto.CompactTextString(m) }
func (*PutSyncChangeResponse) ProtoMessage()               {}
func (*PutSyncChangeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *PutSyncChangeResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *PutSyncChangeResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type SearchSyncChangeRequest struct {
	Seq         uint64 `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	Flatten     bool   `protobuf:"varint,2,opt,name=flatten" json:"flatten,omitempty"`
	Prefix      string `protobuf:"bytes,3,opt,name=prefix" json:"prefix,omitempty"`
	LastSeqOnly bool   `protobuf:"varint,4,opt,name=lastSeqOnly" json:"lastSeqOnly,omitempty"`
}

func (m *SearchSyncChangeRequest) Reset()                    { *m = SearchSyncChangeRequest{} }
func (m *SearchSyncChangeRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchSyncChangeRequest) ProtoMessage()               {}
func (*SearchSyncChangeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *SearchSyncChangeRequest) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *SearchSyncChangeRequest) GetFlatten() bool {
	if m != nil {
		return m.Flatten
	}
	return false
}

func (m *SearchSyncChangeRequest) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *SearchSyncChangeRequest) GetLastSeqOnly() bool {
	if m != nil {
		return m.LastSeqOnly
	}
	return false
}

func init() {
	proto.RegisterType((*ReadNodeRequest)(nil), "tree.ReadNodeRequest")
	proto.RegisterType((*ReadNodeResponse)(nil), "tree.ReadNodeResponse")
	proto.RegisterType((*ListNodesRequest)(nil), "tree.ListNodesRequest")
	proto.RegisterType((*ListNodesResponse)(nil), "tree.ListNodesResponse")
	proto.RegisterType((*CreateNodeRequest)(nil), "tree.CreateNodeRequest")
	proto.RegisterType((*CreateNodeResponse)(nil), "tree.CreateNodeResponse")
	proto.RegisterType((*UpdateNodeRequest)(nil), "tree.UpdateNodeRequest")
	proto.RegisterType((*UpdateNodeResponse)(nil), "tree.UpdateNodeResponse")
	proto.RegisterType((*DeleteNodeRequest)(nil), "tree.DeleteNodeRequest")
	proto.RegisterType((*DeleteNodeResponse)(nil), "tree.DeleteNodeResponse")
	proto.RegisterType((*IndexationSession)(nil), "tree.IndexationSession")
	proto.RegisterType((*IndexationOperation)(nil), "tree.IndexationOperation")
	proto.RegisterType((*OpenSessionRequest)(nil), "tree.OpenSessionRequest")
	proto.RegisterType((*OpenSessionResponse)(nil), "tree.OpenSessionResponse")
	proto.RegisterType((*FlushSessionRequest)(nil), "tree.FlushSessionRequest")
	proto.RegisterType((*FlushSessionResponse)(nil), "tree.FlushSessionResponse")
	proto.RegisterType((*CloseSessionRequest)(nil), "tree.CloseSessionRequest")
	proto.RegisterType((*CloseSessionResponse)(nil), "tree.CloseSessionResponse")
	proto.RegisterType((*WatchNodeRequest)(nil), "tree.WatchNodeRequest")
	proto.RegisterType((*WatchNodeResponse)(nil), "tree.WatchNodeResponse")
	proto.RegisterType((*SearchRequest)(nil), "tree.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "tree.SearchResponse")
	proto.RegisterType((*CreateVersionRequest)(nil), "tree.CreateVersionRequest")
	proto.RegisterType((*CreateVersionResponse)(nil), "tree.CreateVersionResponse")
	proto.RegisterType((*ListVersionsRequest)(nil), "tree.ListVersionsRequest")
	proto.RegisterType((*ListVersionsResponse)(nil), "tree.ListVersionsResponse")
	proto.RegisterType((*HeadVersionRequest)(nil), "tree.HeadVersionRequest")
	proto.RegisterType((*HeadVersionResponse)(nil), "tree.HeadVersionResponse")
	proto.RegisterType((*StoreVersionRequest)(nil), "tree.StoreVersionRequest")
	proto.RegisterType((*StoreVersionResponse)(nil), "tree.StoreVersionResponse")
	proto.RegisterType((*PruneVersionsRequest)(nil), "tree.PruneVersionsRequest")
	proto.RegisterType((*PruneVersionsResponse)(nil), "tree.PruneVersionsResponse")
	proto.RegisterType((*VersioningPolicy)(nil), "tree.VersioningPolicy")
	proto.RegisterType((*VersioningKeepPeriod)(nil), "tree.VersioningKeepPeriod")
	proto.RegisterType((*Node)(nil), "tree.Node")
	proto.RegisterType((*WorkspaceRelativePath)(nil), "tree.WorkspaceRelativePath")
	proto.RegisterType((*ChangeLog)(nil), "tree.ChangeLog")
	proto.RegisterType((*Query)(nil), "tree.Query")
	proto.RegisterType((*GeoQuery)(nil), "tree.GeoQuery")
	proto.RegisterType((*GeoPoint)(nil), "tree.GeoPoint")
	proto.RegisterType((*NodeChangeEvent)(nil), "tree.NodeChangeEvent")
	proto.RegisterType((*IndexEvent)(nil), "tree.IndexEvent")
	proto.RegisterType((*GetEncryptionKeyRequest)(nil), "tree.GetEncryptionKeyRequest")
	proto.RegisterType((*GetEncryptionKeyResponse)(nil), "tree.GetEncryptionKeyResponse")
	proto.RegisterType((*SyncChange)(nil), "tree.SyncChange")
	proto.RegisterType((*SyncChangeNode)(nil), "tree.SyncChangeNode")
	proto.RegisterType((*PutSyncChangeResponse)(nil), "tree.PutSyncChangeResponse")
	proto.RegisterType((*SearchSyncChangeRequest)(nil), "tree.SearchSyncChangeRequest")
	proto.RegisterEnum("tree.NodeType", NodeType_name, NodeType_value)
	proto.RegisterEnum("tree.NodeChangeEvent_EventType", NodeChangeEvent_EventType_name, NodeChangeEvent_EventType_value)
	proto.RegisterEnum("tree.SyncChange_Type", SyncChange_Type_name, SyncChange_Type_value)
}

func init() { proto.RegisterFile("tree.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2561 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x39, 0x4b, 0x6f, 0x23, 0xc7,
	0xd1, 0x1a, 0x0e, 0x45, 0x91, 0xa5, 0xd7, 0xa8, 0x45, 0xad, 0x68, 0xfa, 0xf1, 0xe9, 0x1b, 0x18,
	0x86, 0xec, 0x18, 0xc2, 0x5a, 0x1b, 0xc7, 0x6b, 0xc7, 0x01, 0x96, 0x4b, 0x51, 0xbb, 0x8a, 0x5e,
	0xcc, 0x90, 0xb2, 0x80, 0x00, 0xc6, 0x66, 0x96, 0x2c, 0x51, 0x93, 0xa5, 0x66, 0xa8, 0x9e, 0xa6,
	0x56, 0xcc, 0x25, 0xd9, 0x4b, 0x0e, 0x01, 0x72, 0x31, 0x90, 0x1f, 0x60, 0x04, 0xc8, 0x21, 0x3f,
	0x25, 0xd7, 0x1c, 0x72, 0xce, 0x2d, 0xff, 0x21, 0x97, 0xa0, 0x5f, 0xf3, 0xe0, 0x8c, 0xbc, 0xd2,
	0xae, 0x2f, 0xc4, 0xd4, 0xa3, 0xab, 0xeb, 0xd5, 0x5d, 0xd5, 0x45, 0x00, 0x46, 0x11, 0xb7, 0x46,
	0x34, 0x60, 0x01, 0x29, 0xf2, 0x6f, 0xfb, 0xaf, 0x06, 0x2c, 0x3b, 0xe8, 0xf6, 0x8f, 0x82, 0x3e,
	0x3a, 0x78, 0x39, 0xc6, 0x90, 0x91, 0x0f, 0xa0, 0xc8, 0xc1, 0x9a, 0xb1, 0x61, 0x6c, 0xce, 0x6f,
	0xc3, 0x96, 0x58, 0x24, 0x18, 0x04, 0x9e, 0x6c, 0xc0, 0xfc, 0xa9, 0xc7, 0xce, 0x9b, 0xc1, 0xc5,
	0x85, 0xc7, 0xc2, 0x5a, 0x61, 0xc3, 0xd8, 0x2c, 0x3b, 0x49, 0x14, 0xf9, 0x14, 0x56, 0x38, 0xd8,
	0xba, 0x66, 0xe8, 0xf7, 0xb1, 0xdf, 0x61, 0x2e, 0x0b, 0x6b, 0xa6, 0xe0, 0xcb, 0x12, 0xb8, 0xbc,
	0xe3, 0xe7, 0xbf, 0xc5, 0x1e, 0x93, 0x7c, 0x45, 0x29, 0x2f, 0x81, 0xb2, 0x0f, 0xc0, 0x8a, 0x95,
	0x0c, 0x47, 0x81, 0x1f, 0x22, 0xa9, 0xc1, 0x5c, 0x67, 0xdc, 0xeb, 0x61, 0x18, 0x0a, 0x45, 0xcb,
	0x8e, 0x06, 0x23, 0xfd, 0x0b, 0xf9, 0xfa, 0xdb, 0xdf, 0x15, 0xc0, 0x3a, 0xf0, 0x42, 0xc6, 0x81,
	0xf0, 0xb6, 0x46, 0xbf, 0x07, 0x15, 0x07, 0x7b, 0x63, 0x1a, 0x7a, 0x57, 0xa8, 0x4c, 0x8e, 0x11,
	0x9c, 0xda, 0xf0, 0x7b, 0x18, 0xb2, 0x80, 0x6a, 0x43, 0x63, 0x04, 0xb1, 0x61, 0x81, 0x5b, 0xfd,
	0x0d, 0xd2, 0xd0, 0x0b, 0xfc, 0xb0, 0x36, 0x27, 0x18, 0x52, 0xb8, 0x69, 0xa7, 0x96, 0xb3, 0x4e,
	0xad, 0xc2, 0xec, 0x81, 0x77, 0xe1, 0x31, 0xe1, 0x20, 0xd3, 0x91, 0x00, 0xb9, 0x07, 0xa5, 0xe3,
	0xb3, 0xb3, 0x10, 0x59, 0x6d, 0x56, 0xa0, 0x15, 0x44, 0xb6, 0x00, 0x76, 0xbd, 0x21, 0x43, 0xda,
	0x9d, 0x8c, 0xb0, 0x56, 0xda, 0x30, 0x36, 0x97, 0xb6, 0x97, 0x62, 0xab, 0x38, 0xd6, 0x49, 0x70,
	0xd8, 0x0f, 0x60, 0x25, 0xe1, 0x13, 0xe5, 0xe3, 0xd7, 0x38, 0xc5, 0xfe, 0xde, 0x80, 0x95, 0x26,
	0x45, 0x97, 0xe1, 0x5d, 0xf2, 0xe7, 0x23, 0x58, 0x3a, 0x19, 0xf5, 0x5d, 0x86, 0x7b, 0x67, 0xad,
	0x6b, 0x2f, 0x8c, 0x52, 0x68, 0x0a, 0xcb, 0xb3, 0x68, 0xcf, 0xef, 0xe3, 0xb5, 0xcb, 0xbc, 0xc0,
	0xef, 0x60, 0xc8, 0x1d, 0x25, 0x9c, 0x5b, 0x71, 0xb2, 0x04, 0xee, 0x88, 0x8e, 0x37, 0x44, 0x9f,
	0xa9, 0x04, 0x52, 0x90, 0x7d, 0x04, 0x24, 0xa9, 0xe2, 0x5b, 0x67, 0xcf, 0x5f, 0x0c, 0x58, 0x91,
	0x8a, 0x4e, 0xd9, 0xbc, 0x4b, 0x83, 0x8b, 0x3c, 0x9b, 0x39, 0x9e, 0xd4, 0xa1, 0xd0, 0x0d, 0x72,
	0x64, 0x16, 0xba, 0xc1, 0x8f, 0x67, 0x67, 0x52, 0xad, 0xb7, 0xb6, 0x73, 0x02, 0x2b, 0x3b, 0x38,
	0xc4, 0xbb, 0x85, 0x36, 0xd7, 0x94, 0xc2, 0xeb, 0x4d, 0x31, 0x53, 0xa6, 0x6c, 0x01, 0x49, 0x6e,
	0xfd, 0x3a, 0x53, 0xec, 0x7f, 0x1b, 0x39, 0xdb, 0x12, 0x02, 0xc5, 0x93, 0xb1, 0xd7, 0x17, 0xcc,
	0x15, 0x47, 0x7c, 0xf3, 0x53, 0xb6, 0x83, 0x61, 0x8f, 0x7a, 0x23, 0x16, 0x6b, 0x96, 0x44, 0x91,
	0x8f, 0xa0, 0xec, 0x04, 0x81, 0x38, 0x07, 0x42, 0xab, 0xb4, 0x95, 0x11, 0x8d, 0x3c, 0x84, 0xf5,
	0xd6, 0xf5, 0x08, 0x7b, 0x0c, 0xfb, 0xc7, 0x23, 0xa4, 0x62, 0xe7, 0xb0, 0x19, 0x8c, 0x7d, 0x7d,
	0x3e, 0x6f, 0x22, 0x93, 0x9f, 0xc2, 0x5a, 0x73, 0x4c, 0x29, 0xfa, 0x2c, 0xa2, 0xc8, 0x75, 0xf2,
	0x00, 0xe7, 0x13, 0xed, 0x4b, 0x58, 0x8d, 0x4d, 0x8c, 0x68, 0xdc, 0x20, 0x65, 0x6f, 0xc2, 0xd6,
	0x24, 0xea, 0x16, 0x26, 0xdf, 0x83, 0x52, 0x73, 0x4c, 0xc3, 0x80, 0x0a, 0x83, 0x4d, 0x47, 0x41,
	0xf6, 0x13, 0x20, 0xc7, 0x23, 0xd4, 0xfe, 0xd4, 0x29, 0xf0, 0x19, 0xcc, 0xe9, 0xc0, 0xca, 0x2c,
	0x58, 0x97, 0xfe, 0xc9, 0x04, 0xc0, 0xd1, 0x7c, 0xf6, 0x53, 0x58, 0x4d, 0x09, 0x52, 0x01, 0x7d,
	0x33, 0x49, 0xbb, 0xc3, 0x71, 0x78, 0xfe, 0xf6, 0x3a, 0xed, 0x41, 0x35, 0x2d, 0xe9, 0xad, 0x94,
	0x6a, 0x0e, 0x83, 0x10, 0x7f, 0x14, 0xa5, 0xd2, 0x92, 0xde, 0x5c, 0xa9, 0x6d, 0xb0, 0x4e, 0x5d,
	0xd6, 0x3b, 0xbf, 0xc3, 0xe9, 0xe5, 0x35, 0x20, 0xb1, 0xe6, 0x96, 0x35, 0xe0, 0x4f, 0x06, 0x2c,
	0x76, 0xd0, 0xa5, 0xbd, 0x73, 0xbd, 0xcd, 0xff, 0xc3, 0xec, 0xaf, 0xc6, 0x48, 0x27, 0x6a, 0xc9,
	0xbc, 0x5c, 0x22, 0x50, 0x8e, 0xa4, 0xf0, 0xb3, 0xd9, 0xf1, 0x7e, 0x27, 0x2f, 0x9f, 0x59, 0x47,
	0x7c, 0x73, 0x9c, 0xb8, 0x42, 0x4d, 0x89, 0x13, 0xd7, 0x66, 0x0d, 0xe6, 0x76, 0x90, 0xb9, 0xde,
	0x50, 0xb7, 0x05, 0x1a, 0xe4, 0xd5, 0x70, 0xd7, 0xed, 0xa9, 0xb2, 0x57, 0x71, 0x24, 0x60, 0xdf,
	0x87, 0x25, 0xad, 0xcb, 0x2d, 0xd5, 0xbf, 0x84, 0xaa, 0x2c, 0x0f, 0xaa, 0x12, 0xdf, 0xf6, 0xa6,
	0xfb, 0x12, 0x16, 0xba, 0xd4, 0x1b, 0x0c, 0x90, 0xb6, 0xae, 0xf8, 0x0d, 0x26, 0xaf, 0xd1, 0xb5,
	0x98, 0xaf, 0x79, 0xee, 0xfa, 0x03, 0x14, 0x44, 0x27, 0xc5, 0x6a, 0x3f, 0x86, 0xb5, 0xa9, 0x2d,
	0x95, 0xae, 0x1f, 0xc3, 0x9c, 0x42, 0xa9, 0x6d, 0x97, 0xa5, 0x38, 0x29, 0xea, 0x20, 0x18, 0x38,
	0x9a, 0x6e, 0x7f, 0x0e, 0xab, 0xbc, 0x5c, 0xeb, 0xf6, 0xe1, 0xb6, 0x11, 0x6e, 0x40, 0x35, 0xbd,
	0xec, 0xee, 0x3b, 0x3b, 0x40, 0x9e, 0xa2, 0xdb, 0xbf, 0xa3, 0xbb, 0xde, 0x83, 0x8a, 0x5a, 0xb1,
	0xd7, 0x57, 0x77, 0x50, 0x8c, 0xb0, 0x1f, 0xc1, 0x6a, 0x4a, 0xe6, 0xdd, 0xb5, 0xfa, 0x0d, 0xac,
	0x76, 0x58, 0x40, 0xef, 0x1a, 0xc5, 0xc4, 0x0e, 0x85, 0xd7, 0xec, 0x30, 0x80, 0x6a, 0x7a, 0x87,
	0xd7, 0x56, 0xd8, 0xcf, 0x61, 0xb1, 0x4d, 0xc7, 0x3e, 0x46, 0x7d, 0x5f, 0x61, 0xc3, 0xcc, 0xdb,
	0x22, 0xcd, 0x65, 0x0f, 0xa1, 0x9a, 0x42, 0x68, 0x5b, 0x3e, 0x01, 0x38, 0xf1, 0xbd, 0xcb, 0x31,
	0xde, 0x60, 0x51, 0x82, 0x4a, 0x36, 0x61, 0xb9, 0x31, 0x1c, 0xca, 0x22, 0x2a, 0xda, 0x66, 0xdd,
	0x63, 0x4d, 0xa3, 0xed, 0x06, 0xac, 0x4d, 0xed, 0xa6, 0xec, 0xda, 0x84, 0x65, 0xc5, 0x18, 0xe9,
	0x6f, 0x6c, 0x98, 0x9b, 0x15, 0x67, 0x1a, 0x6d, 0x7f, 0x67, 0x82, 0xa5, 0x00, 0xcf, 0x1f, 0xb4,
	0x83, 0xa1, 0xd7, 0x9b, 0xe4, 0x56, 0x5f, 0x02, 0xc5, 0x23, 0xf7, 0x02, 0x55, 0xfc, 0xc5, 0xf7,
	0x74, 0x79, 0x32, 0xb3, 0xe5, 0xe9, 0x67, 0x70, 0x4f, 0x6f, 0xb5, 0xe3, 0x32, 0xb7, 0x13, 0x8c,
	0x69, 0x0f, 0x85, 0x9c, 0xa2, 0x60, 0xbe, 0x81, 0x4a, 0xbe, 0x82, 0x5a, 0x96, 0xf2, 0x78, 0xdc,
	0x7b, 0x11, 0x5d, 0x1a, 0x37, 0xd2, 0x79, 0xc7, 0x7e, 0xe8, 0x5e, 0x77, 0x03, 0xe6, 0x0e, 0xc5,
	0x3d, 0x55, 0x12, 0x85, 0x31, 0x85, 0xe3, 0x6d, 0xec, 0xa1, 0x7b, 0xcd, 0x3f, 0xdb, 0x48, 0x77,
	0xbd, 0x21, 0x8a, 0xbe, 0xde, 0x74, 0xa6, 0xb0, 0x5c, 0xff, 0xbd, 0x81, 0x1f, 0x50, 0xe4, 0x50,
	0xf8, 0x44, 0x9c, 0x7c, 0xda, 0x3d, 0x77, 0x7d, 0xd1, 0xe4, 0x9b, 0xce, 0x0d, 0x54, 0xf2, 0x35,
	0xcc, 0xef, 0x23, 0x8e, 0xda, 0x48, 0xbd, 0xa0, 0x1f, 0xd6, 0x2a, 0x22, 0x79, 0xea, 0x32, 0xe0,
	0xb1, 0xbb, 0x63, 0x16, 0x27, 0xc9, 0x6e, 0xff, 0x1a, 0xaa, 0x79, 0x4c, 0xe4, 0x43, 0x58, 0xdc,
	0xf3, 0x19, 0xd2, 0x2b, 0x77, 0xd8, 0x61, 0x2e, 0x65, 0x2a, 0x40, 0x69, 0x24, 0x3f, 0xae, 0x87,
	0xee, 0xf5, 0xd1, 0xf8, 0xe2, 0x39, 0x52, 0x75, 0x21, 0xc7, 0x08, 0xfb, 0x95, 0x29, 0x8f, 0xd5,
	0x4d, 0x41, 0x6e, 0xbb, 0xec, 0x5c, 0x07, 0x99, 0x7f, 0x13, 0x1b, 0x8a, 0xe2, 0x19, 0x62, 0xe6,
	0x3e, 0x43, 0x04, 0x2d, 0x2a, 0x09, 0xb2, 0x7b, 0x92, 0x25, 0xa1, 0x0a, 0xb3, 0x87, 0x5d, 0xef,
	0x02, 0x55, 0x6b, 0x24, 0x01, 0xce, 0x79, 0xc8, 0x8f, 0x40, 0x49, 0x16, 0x8a, 0x43, 0xa5, 0x49,
	0x8b, 0xb9, 0x03, 0x11, 0x82, 0x8a, 0x23, 0xbe, 0xf9, 0xe1, 0xd6, 0xcf, 0xa9, 0x4a, 0xfe, 0xc9,
	0xd3, 0x74, 0xf2, 0x05, 0x54, 0x0e, 0x91, 0xb9, 0xe2, 0x80, 0xd7, 0xca, 0x82, 0xf9, 0x9d, 0x58,
	0xcb, 0xad, 0x88, 0xd6, 0xf2, 0x19, 0x9d, 0x38, 0x31, 0x2f, 0xf9, 0x12, 0x2a, 0x8d, 0xd1, 0x08,
	0x5d, 0x1a, 0xee, 0xf9, 0x35, 0x10, 0x0b, 0xdf, 0x95, 0x0b, 0x4f, 0x03, 0xfa, 0x22, 0x1c, 0xb9,
	0x3d, 0x74, 0x70, 0xe8, 0x32, 0xef, 0x0a, 0xb9, 0x27, 0x9c, 0x98, 0xbb, 0xfe, 0x35, 0x2c, 0xa5,
	0xe5, 0x12, 0x0b, 0xcc, 0x17, 0x38, 0x51, 0xde, 0xe4, 0x9f, 0xdc, 0x01, 0x57, 0xee, 0x70, 0xac,
	0x8f, 0x8c, 0x04, 0xbe, 0x2a, 0x3c, 0x34, 0xec, 0x6f, 0x61, 0x2d, 0x77, 0x07, 0xde, 0xcd, 0x9d,
	0x86, 0x89, 0xa8, 0x28, 0x88, 0xdf, 0x53, 0xa7, 0xe1, 0x81, 0xfb, 0x1c, 0x87, 0x4a, 0x98, 0x06,
	0xa3, 0x88, 0x99, 0x71, 0xc4, 0xec, 0x7f, 0x18, 0x50, 0x89, 0xfc, 0xf4, 0x86, 0xad, 0x74, 0x14,
	0x3d, 0x73, 0x2a, 0x7a, 0x99, 0x38, 0x13, 0x28, 0xf2, 0x23, 0x28, 0xc2, 0xbc, 0xe0, 0x88, 0x6f,
	0x9e, 0x82, 0xc7, 0x2f, 0x7d, 0xa4, 0x62, 0xe3, 0x92, 0xac, 0x18, 0x11, 0x82, 0xfc, 0x04, 0x66,
	0x65, 0xdd, 0x9d, 0xfb, 0xa1, 0xba, 0x2b, 0x79, 0xec, 0x7f, 0x16, 0x54, 0x47, 0x42, 0x3e, 0x00,
	0xe0, 0xe6, 0xb5, 0x29, 0x9e, 0x79, 0xd7, 0xea, 0x3e, 0x4b, 0x60, 0xb8, 0x93, 0x0e, 0x3d, 0x3f,
	0x6a, 0x4d, 0x4c, 0x47, 0x83, 0x82, 0x22, 0xcf, 0xb5, 0x32, 0x47, 0x83, 0x6a, 0xcd, 0x8e, 0xcb,
	0xb4, 0x4d, 0x1a, 0x54, 0x6b, 0x04, 0x65, 0x36, 0x5a, 0x23, 0x28, 0xfa, 0x40, 0x94, 0x7e, 0xe0,
	0x40, 0xd4, 0xa1, 0xcc, 0xef, 0x04, 0x71, 0xd3, 0xc9, 0xb4, 0x8e, 0x60, 0x2e, 0xb9, 0x19, 0xf8,
	0x8c, 0x3b, 0xa0, 0x2c, 0x83, 0xa9, 0x40, 0x6e, 0xe1, 0x2e, 0x45, 0xec, 0x30, 0xea, 0xf9, 0x83,
	0x5a, 0x45, 0x10, 0x13, 0x18, 0xee, 0x56, 0x31, 0x7d, 0x11, 0x35, 0x0f, 0xa4, 0x5b, 0x23, 0x04,
	0xf9, 0x04, 0xca, 0x4f, 0x30, 0x90, 0xdd, 0xdb, 0xbc, 0xf0, 0xac, 0xd2, 0x4d, 0x63, 0x9d, 0x88,
	0x6e, 0xff, 0xdd, 0x88, 0x99, 0xc9, 0x47, 0x50, 0x6a, 0x22, 0xbf, 0x42, 0x54, 0x61, 0x8a, 0x97,
	0xb5, 0x03, 0xcf, 0x67, 0x8e, 0xa2, 0x72, 0xa3, 0x76, 0xbc, 0x90, 0xb9, 0x7e, 0x4f, 0xe7, 0x74,
	0x04, 0x93, 0x4d, 0x98, 0xeb, 0x06, 0xa3, 0x03, 0x3c, 0x63, 0xea, 0xe5, 0x35, 0x2d, 0x44, 0x93,
	0xc9, 0x7d, 0x98, 0x7f, 0x1c, 0x30, 0x16, 0x5c, 0x38, 0xde, 0xe0, 0x5c, 0x3e, 0xb8, 0xb2, 0xdc,
	0x49, 0x16, 0x7b, 0x4b, 0xe8, 0x2a, 0x08, 0xfc, 0x98, 0x1d, 0xb8, 0xf2, 0xe2, 0x33, 0x1c, 0xfe,
	0x29, 0x30, 0x2a, 0x87, 0x39, 0x26, 0xf0, 0xed, 0xef, 0x0b, 0xb0, 0x3c, 0x95, 0x4d, 0xe4, 0x81,
	0x0a, 0x9a, 0x21, 0x82, 0xf6, 0x7f, 0xb9, 0x29, 0xb7, 0x25, 0x7e, 0x13, 0x51, 0xb4, 0xa1, 0x24,
	0x2b, 0x4b, 0xce, 0x43, 0x5b, 0x51, 0x38, 0x4f, 0xd7, 0xa5, 0x03, 0x64, 0x39, 0x2f, 0x4e, 0x45,
	0xb9, 0xf1, 0xd9, 0x3f, 0x81, 0x4a, 0xb4, 0x25, 0x01, 0x28, 0x35, 0x9d, 0x56, 0xa3, 0xdb, 0xb2,
	0x66, 0x48, 0x19, 0x8a, 0x4e, 0xab, 0xb1, 0x63, 0x19, 0x64, 0x19, 0xe6, 0x4f, 0xda, 0x3b, 0x8d,
	0x6e, 0xeb, 0x59, 0xbb, 0xd1, 0x7d, 0x6a, 0x15, 0x08, 0x81, 0x25, 0x85, 0x68, 0x1e, 0x1f, 0x75,
	0x5b, 0x47, 0x5d, 0xcb, 0x4c, 0x30, 0x1d, 0xb6, 0xba, 0x0d, 0xab, 0x48, 0xaa, 0x60, 0x29, 0xc4,
	0x49, 0xa7, 0xe5, 0x48, 0x6c, 0x89, 0xef, 0xb0, 0xd3, 0x3a, 0x68, 0x75, 0x5b, 0xd6, 0xac, 0xfd,
	0x37, 0x03, 0x40, 0xbc, 0x40, 0xa4, 0x7b, 0x3e, 0x84, 0xc5, 0x16, 0xa5, 0x01, 0xdd, 0x41, 0x26,
	0xde, 0xbd, 0xaa, 0x1d, 0x4a, 0x23, 0x79, 0xd5, 0x9c, 0xaa, 0xe2, 0x32, 0x0d, 0xa6, 0xb0, 0x22,
	0x4f, 0xf9, 0xc2, 0xc4, 0xcd, 0x14, 0x23, 0xc8, 0xa7, 0xb0, 0xa2, 0x1e, 0x3a, 0xbb, 0x01, 0xed,
	0xa1, 0x78, 0x34, 0xa9, 0x76, 0x20, 0x4b, 0xb0, 0x5f, 0x19, 0xb0, 0xfe, 0x04, 0x59, 0xcb, 0xef,
	0xd1, 0x89, 0xb8, 0x9a, 0xf6, 0x71, 0xa2, 0xbb, 0x2a, 0x7e, 0xb5, 0x85, 0x2a, 0x6d, 0xf9, 0xd5,
	0x16, 0xca, 0x24, 0x6d, 0xbb, 0x61, 0xf8, 0x32, 0xa0, 0xba, 0x57, 0x8d, 0xe0, 0xa8, 0xa3, 0x34,
	0x6f, 0xe8, 0x28, 0xf9, 0x63, 0x5a, 0x14, 0x71, 0x71, 0xe4, 0xcb, 0x8e, 0x82, 0xec, 0x4f, 0xa1,
	0x96, 0x55, 0x41, 0xb5, 0x5a, 0x16, 0x98, 0xfb, 0xea, 0xde, 0x5f, 0x70, 0xf8, 0xa7, 0xfd, 0x87,
	0x02, 0x40, 0x67, 0xe2, 0xf7, 0x64, 0x66, 0x71, 0x86, 0x10, 0x2f, 0x05, 0x43, 0xd1, 0xe1, 0x9f,
	0x64, 0x1d, 0x4a, 0x7e, 0xd0, 0xc7, 0xa8, 0x99, 0x9e, 0xe3, 0xd0, 0x33, 0xaf, 0x4f, 0x3e, 0x86,
	0x22, 0x8b, 0x4b, 0xad, 0xba, 0x17, 0x63, 0x51, 0x5b, 0x32, 0x35, 0x39, 0x0b, 0x57, 0x35, 0x94,
	0xa9, 0x29, 0x3d, 0xa7, 0x20, 0x8e, 0x67, 0x32, 0x1d, 0x65, 0x9b, 0xa4, 0x20, 0xb2, 0x09, 0x45,
	0x5f, 0xd7, 0xdd, 0xf9, 0xed, 0xea, 0xb4, 0x68, 0xe9, 0x04, 0xce, 0x61, 0x3f, 0x96, 0x27, 0x85,
	0xcc, 0xc3, 0xdc, 0xd8, 0x7f, 0xe1, 0x07, 0x2f, 0x7d, 0x6b, 0x86, 0xa7, 0x4e, 0x4f, 0xf8, 0xc2,
	0x32, 0xf8, 0x77, 0x5f, 0x74, 0x91, 0x56, 0x81, 0x27, 0xea, 0xc8, 0x65, 0xe7, 0x96, 0xc9, 0xd9,
	0x7b, 0xf2, 0x1a, 0xb3, 0x8a, 0x3c, 0xbb, 0x96, 0xd2, 0xc2, 0x79, 0x5c, 0x9e, 0x4f, 0x18, 0x86,
	0xfc, 0x12, 0x36, 0xc4, 0x85, 0x1a, 0xc1, 0xdc, 0x45, 0x17, 0xfd, 0xcf, 0x95, 0x37, 0xf8, 0x27,
	0x2f, 0x3f, 0x17, 0x2c, 0x51, 0x7e, 0x04, 0x40, 0xde, 0x85, 0x32, 0x57, 0x51, 0xa4, 0x95, 0x34,
	0xbb, 0x22, 0x5c, 0xc7, 0x55, 0x20, 0x0f, 0xa0, 0x4a, 0x71, 0x14, 0x84, 0x1e, 0x0b, 0xe8, 0x64,
	0xaf, 0x8f, 0x3e, 0xf3, 0xce, 0x3c, 0xa4, 0xca, 0x0f, 0x6b, 0x31, 0xed, 0x99, 0x17, 0x11, 0xed,
	0x26, 0xac, 0xb5, 0xc7, 0x2c, 0x56, 0x35, 0xf9, 0x32, 0x08, 0xd3, 0x2f, 0x03, 0x05, 0x0a, 0x65,
	0xc3, 0x41, 0xa4, 0x6c, 0x38, 0xb0, 0x7f, 0x0f, 0xeb, 0xf2, 0xe1, 0x9a, 0x94, 0x23, 0x33, 0x34,
	0x1b, 0xfc, 0x1a, 0xcc, 0x9d, 0x0d, 0x5d, 0xc6, 0xd0, 0x57, 0x5d, 0xbd, 0x06, 0x79, 0xe8, 0x46,
	0xb2, 0xb6, 0xc9, 0x23, 0xa3, 0x20, 0x5e, 0xac, 0x87, 0x6e, 0xc8, 0x3a, 0x78, 0x79, 0xec, 0x0f,
	0x27, 0x7a, 0xc4, 0x9e, 0x40, 0x7d, 0xf2, 0x19, 0x94, 0x75, 0xfd, 0xe1, 0x71, 0x38, 0x39, 0xda,
	0x3f, 0x3a, 0x3e, 0x3d, 0x92, 0xf7, 0xc8, 0x41, 0xab, 0xb1, 0x6b, 0x19, 0x64, 0x09, 0xa0, 0x79,
	0x7c, 0x70, 0xd0, 0x6a, 0x76, 0xf7, 0x8e, 0x8f, 0xac, 0xc2, 0xf6, 0x9f, 0x0d, 0x58, 0xe0, 0x6b,
	0xda, 0x34, 0xb8, 0xf2, 0xfa, 0x48, 0xc9, 0xcf, 0xa1, 0xac, 0xc7, 0xf4, 0x44, 0x65, 0xde, 0xd4,
	0x7f, 0x0b, 0xf5, 0x7b, 0xd3, 0x68, 0xe9, 0x2b, 0x7b, 0x86, 0x3c, 0x82, 0x4a, 0x34, 0x80, 0x26,
	0x8a, 0x6d, 0x7a, 0x4a, 0x5f, 0x5f, 0xcf, 0xe0, 0xf5, 0xfa, 0xfb, 0xc6, 0xf6, 0xb7, 0x50, 0x4d,
	0xaa, 0xd3, 0x61, 0x14, 0xdd, 0x0b, 0xa4, 0xa4, 0x05, 0x4b, 0x7a, 0x3f, 0x89, 0xbb, 0xb3, 0x72,
	0x9b, 0xc6, 0x7d, 0x63, 0xfb, 0x5f, 0xca, 0x5c, 0x07, 0x7b, 0xe8, 0x5d, 0x21, 0x25, 0x0d, 0x80,
	0x78, 0xb2, 0x4c, 0x94, 0x6a, 0x99, 0x71, 0x78, 0xbd, 0x96, 0x25, 0x44, 0x46, 0x37, 0x00, 0xe2,
	0xa1, 0xad, 0x16, 0x91, 0x99, 0x2e, 0x6b, 0x11, 0xd9, 0xf9, 0xae, 0x14, 0x11, 0x0f, 0x4b, 0xb5,
	0x88, 0xcc, 0xe4, 0x56, 0x8b, 0xc8, 0xce, 0x55, 0xed, 0x99, 0xed, 0xff, 0x1a, 0x40, 0x92, 0x96,
	0x29, 0x2f, 0xed, 0x83, 0x15, 0x2b, 0xad, 0x70, 0x6f, 0x62, 0x25, 0xf7, 0x1e, 0x17, 0x16, 0xab,
	0x9f, 0x16, 0x76, 0x27, 0x7b, 0xb5, 0xb0, 0xd8, 0x90, 0xb4, 0xb0, 0x3b, 0x59, 0x2e, 0xe2, 0xfa,
	0x1f, 0x7e, 0xd1, 0xc8, 0x9a, 0x21, 0xaa, 0x19, 0x52, 0xb2, 0x03, 0xf3, 0x89, 0x81, 0x25, 0x51,
	0x12, 0xb2, 0xc3, 0xd0, 0xfa, 0x3b, 0x39, 0x94, 0x28, 0x32, 0x4f, 0x60, 0x21, 0x39, 0x62, 0x24,
	0x8a, 0x39, 0x67, 0x80, 0x59, 0xaf, 0xe7, 0x91, 0x92, 0x82, 0x92, 0x63, 0x41, 0x2d, 0x28, 0x67,
	0xe8, 0xa8, 0x05, 0xe5, 0x4d, 0x11, 0xed, 0x99, 0xed, 0x6f, 0x64, 0x9c, 0x45, 0xbd, 0x0e, 0xa3,
	0x63, 0xfb, 0x08, 0x2a, 0xd1, 0xd8, 0x4f, 0x9f, 0xbc, 0xe9, 0xd9, 0xa1, 0x3e, 0x79, 0x99, 0xf9,
	0xa0, 0x38, 0x79, 0x4d, 0x28, 0xcb, 0xdb, 0x0b, 0x29, 0xf9, 0x02, 0x4a, 0xf2, 0x9b, 0xac, 0xaa,
	0x0a, 0x91, 0x1c, 0x0e, 0xd6, 0xab, 0x69, 0x64, 0x42, 0xc8, 0x2a, 0xac, 0x88, 0x66, 0x4a, 0x56,
	0x00, 0x7e, 0x08, 0x91, 0x4e, 0x21, 0x4f, 0xa9, 0xc7, 0x90, 0x6e, 0xbf, 0x32, 0x61, 0x91, 0x63,
	0xd5, 0x03, 0x17, 0x29, 0xf9, 0x25, 0x2c, 0xa6, 0x46, 0x6a, 0xa4, 0x9e, 0x4c, 0xc7, 0xf4, 0x50,
	0xa8, 0xfe, 0x6e, 0x2e, 0x2d, 0xe9, 0xed, 0xe4, 0xa0, 0x47, 0x7b, 0x3b, 0x67, 0xbc, 0xa4, 0xbd,
	0x9d, 0x37, 0x17, 0xb2, 0x67, 0xc8, 0x1e, 0x2c, 0x24, 0x87, 0x6d, 0x5a, 0x50, 0xce, 0xdc, 0x4e,
	0x0b, 0xca, 0x9b, 0xcd, 0x71, 0xdf, 0xf0, 0x84, 0x4c, 0x0c, 0xc8, 0x74, 0x42, 0x66, 0xe7, 0x70,
	0x3a, 0x21, 0x73, 0xa6, 0x69, 0xf6, 0x0c, 0xf7, 0x52, 0x6a, 0xd6, 0xa3, 0xbd, 0x94, 0x37, 0x6e,
	0xd2, 0x5e, 0xca, 0x1d, 0x0e, 0xd9, 0x33, 0xdb, 0x08, 0x4b, 0xfc, 0x35, 0xb2, 0x8f, 0x93, 0x43,
	0xd7, 0x77, 0x07, 0x48, 0x49, 0x07, 0xac, 0xe9, 0x0e, 0x87, 0xbc, 0xaf, 0x7b, 0xf2, 0xdc, 0xe6,
	0xab, 0xfe, 0xc1, 0x4d, 0xe4, 0x68, 0x9b, 0x3f, 0x1a, 0x30, 0x1f, 0x97, 0xc4, 0x90, 0x3c, 0x04,
	0xb3, 0x3d, 0x66, 0xc4, 0x9a, 0x6e, 0x3e, 0x22, 0x75, 0xf3, 0x2a, 0x31, 0x3f, 0xe8, 0xe4, 0x17,
	0x51, 0x5e, 0xbe, 0x9f, 0x4c, 0xc1, 0x4c, 0xbd, 0xad, 0x67, 0x64, 0xf3, 0x08, 0x3c, 0x2f, 0x89,
	0x7f, 0xcd, 0x1f, 0xfc, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x6d, 0x20, 0x01, 0x43, 0x1f, 0x00,
	0x00,
}
