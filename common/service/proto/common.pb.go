// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	common.proto

It has these top-level messages:
	Query
	ResourcePolicyQuery
	ResourcePolicy
	ActionOutputQuery
	SourceSingleQuery
	StopEvent
	StatusResponse
	ChangesArchiveQuery
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OperationType int32

const (
	OperationType_OR  OperationType = 0
	OperationType_AND OperationType = 1
)

var OperationType_name = map[int32]string{
	0: "OR",
	1: "AND",
}
var OperationType_value = map[string]int32{
	"OR":  0,
	"AND": 1,
}

func (x OperationType) String() string {
	return proto.EnumName(OperationType_name, int32(x))
}
func (OperationType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ResourcePolicyAction int32

const (
	ResourcePolicyAction_ANY        ResourcePolicyAction = 0
	ResourcePolicyAction_OWNER      ResourcePolicyAction = 1
	ResourcePolicyAction_READ       ResourcePolicyAction = 2
	ResourcePolicyAction_WRITE      ResourcePolicyAction = 3
	ResourcePolicyAction_EDIT_RULES ResourcePolicyAction = 4
)

var ResourcePolicyAction_name = map[int32]string{
	0: "ANY",
	1: "OWNER",
	2: "READ",
	3: "WRITE",
	4: "EDIT_RULES",
}
var ResourcePolicyAction_value = map[string]int32{
	"ANY":        0,
	"OWNER":      1,
	"READ":       2,
	"WRITE":      3,
	"EDIT_RULES": 4,
}

func (x ResourcePolicyAction) String() string {
	return proto.EnumName(ResourcePolicyAction_name, int32(x))
}
func (ResourcePolicyAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ResourcePolicy_PolicyEffect int32

const (
	ResourcePolicy_deny  ResourcePolicy_PolicyEffect = 0
	ResourcePolicy_allow ResourcePolicy_PolicyEffect = 1
)

var ResourcePolicy_PolicyEffect_name = map[int32]string{
	0: "deny",
	1: "allow",
}
var ResourcePolicy_PolicyEffect_value = map[string]int32{
	"deny":  0,
	"allow": 1,
}

func (x ResourcePolicy_PolicyEffect) String() string {
	return proto.EnumName(ResourcePolicy_PolicyEffect_name, int32(x))
}
func (ResourcePolicy_PolicyEffect) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 0}
}

type Query struct {
	SubQueries          []*google_protobuf.Any `protobuf:"bytes,1,rep,name=SubQueries" json:"SubQueries,omitempty"`
	Operation           OperationType          `protobuf:"varint,2,opt,name=Operation,enum=service.OperationType" json:"Operation,omitempty"`
	ResourcePolicyQuery *ResourcePolicyQuery   `protobuf:"bytes,3,opt,name=ResourcePolicyQuery" json:"ResourcePolicyQuery,omitempty"`
	Offset              int64                  `protobuf:"varint,4,opt,name=Offset" json:"Offset,omitempty"`
	Limit               int64                  `protobuf:"varint,5,opt,name=Limit" json:"Limit,omitempty"`
	GroupBy             int32                  `protobuf:"varint,6,opt,name=groupBy" json:"groupBy,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Query) GetSubQueries() []*google_protobuf.Any {
	if m != nil {
		return m.SubQueries
	}
	return nil
}

func (m *Query) GetOperation() OperationType {
	if m != nil {
		return m.Operation
	}
	return OperationType_OR
}

func (m *Query) GetResourcePolicyQuery() *ResourcePolicyQuery {
	if m != nil {
		return m.ResourcePolicyQuery
	}
	return nil
}

func (m *Query) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Query) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Query) GetGroupBy() int32 {
	if m != nil {
		return m.GroupBy
	}
	return 0
}

type ResourcePolicyQuery struct {
	Subjects []string `protobuf:"bytes,1,rep,name=Subjects" json:"Subjects,omitempty"`
	Empty    bool     `protobuf:"varint,2,opt,name=Empty" json:"Empty,omitempty"`
	Any      bool     `protobuf:"varint,3,opt,name=Any" json:"Any,omitempty"`
}

func (m *ResourcePolicyQuery) Reset()                    { *m = ResourcePolicyQuery{} }
func (m *ResourcePolicyQuery) String() string            { return proto.CompactTextString(m) }
func (*ResourcePolicyQuery) ProtoMessage()               {}
func (*ResourcePolicyQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResourcePolicyQuery) GetSubjects() []string {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *ResourcePolicyQuery) GetEmpty() bool {
	if m != nil {
		return m.Empty
	}
	return false
}

func (m *ResourcePolicyQuery) GetAny() bool {
	if m != nil {
		return m.Any
	}
	return false
}

type ResourcePolicy struct {
	Id             int64                       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Resource       string                      `protobuf:"bytes,2,opt,name=Resource" json:"Resource,omitempty"`
	Action         ResourcePolicyAction        `protobuf:"varint,3,opt,name=Action,enum=service.ResourcePolicyAction" json:"Action,omitempty"`
	Subject        string                      `protobuf:"bytes,4,opt,name=Subject" json:"Subject,omitempty"`
	Effect         ResourcePolicy_PolicyEffect `protobuf:"varint,5,opt,name=Effect,enum=service.ResourcePolicy_PolicyEffect" json:"Effect,omitempty"`
	JsonConditions string                      `protobuf:"bytes,6,opt,name=JsonConditions" json:"JsonConditions,omitempty"`
}

func (m *ResourcePolicy) Reset()                    { *m = ResourcePolicy{} }
func (m *ResourcePolicy) String() string            { return proto.CompactTextString(m) }
func (*ResourcePolicy) ProtoMessage()               {}
func (*ResourcePolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResourcePolicy) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ResourcePolicy) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *ResourcePolicy) GetAction() ResourcePolicyAction {
	if m != nil {
		return m.Action
	}
	return ResourcePolicyAction_ANY
}

func (m *ResourcePolicy) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *ResourcePolicy) GetEffect() ResourcePolicy_PolicyEffect {
	if m != nil {
		return m.Effect
	}
	return ResourcePolicy_deny
}

func (m *ResourcePolicy) GetJsonConditions() string {
	if m != nil {
		return m.JsonConditions
	}
	return ""
}

type ActionOutputQuery struct {
	// Check if ActionOutput has Success = true
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	// Check if ActionOutput has Success = false
	Failed bool `protobuf:"varint,2,opt,name=Failed" json:"Failed,omitempty"`
	// Find occurence of string in body
	StringBodyCompare string `protobuf:"bytes,3,opt,name=StringBodyCompare" json:"StringBodyCompare,omitempty"`
	// Find similar Json
	JsonBodyCompare string `protobuf:"bytes,4,opt,name=JsonBodyCompare" json:"JsonBodyCompare,omitempty"`
	// Find occurence of string in error
	ErrorStringCompare string `protobuf:"bytes,5,opt,name=ErrorStringCompare" json:"ErrorStringCompare,omitempty"`
	// Invert condition
	Not bool `protobuf:"varint,6,opt,name=Not" json:"Not,omitempty"`
}

func (m *ActionOutputQuery) Reset()                    { *m = ActionOutputQuery{} }
func (m *ActionOutputQuery) String() string            { return proto.CompactTextString(m) }
func (*ActionOutputQuery) ProtoMessage()               {}
func (*ActionOutputQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ActionOutputQuery) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ActionOutputQuery) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

func (m *ActionOutputQuery) GetStringBodyCompare() string {
	if m != nil {
		return m.StringBodyCompare
	}
	return ""
}

func (m *ActionOutputQuery) GetJsonBodyCompare() string {
	if m != nil {
		return m.JsonBodyCompare
	}
	return ""
}

func (m *ActionOutputQuery) GetErrorStringCompare() string {
	if m != nil {
		return m.ErrorStringCompare
	}
	return ""
}

func (m *ActionOutputQuery) GetNot() bool {
	if m != nil {
		return m.Not
	}
	return false
}

type SourceSingleQuery struct {
	// Regexp to filter context by IP
	IPMask string `protobuf:"bytes,2,opt,name=IPMask" json:"IPMask,omitempty"`
	// Regexp to filter for a given user-agent
	UserAgent string `protobuf:"bytes,3,opt,name=UserAgent" json:"UserAgent,omitempty"`
	// Limit to a given workspaceId
	WorkspaceId string `protobuf:"bytes,4,opt,name=WorkspaceId" json:"WorkspaceId,omitempty"`
	// Invert condition
	Not bool `protobuf:"varint,5,opt,name=Not" json:"Not,omitempty"`
}

func (m *SourceSingleQuery) Reset()                    { *m = SourceSingleQuery{} }
func (m *SourceSingleQuery) String() string            { return proto.CompactTextString(m) }
func (*SourceSingleQuery) ProtoMessage()               {}
func (*SourceSingleQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SourceSingleQuery) GetIPMask() string {
	if m != nil {
		return m.IPMask
	}
	return ""
}

func (m *SourceSingleQuery) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *SourceSingleQuery) GetWorkspaceId() string {
	if m != nil {
		return m.WorkspaceId
	}
	return ""
}

func (m *SourceSingleQuery) GetNot() bool {
	if m != nil {
		return m.Not
	}
	return false
}

type StopEvent struct {
	ServiceName string `protobuf:"bytes,1,opt,name=ServiceName" json:"ServiceName,omitempty"`
}

func (m *StopEvent) Reset()                    { *m = StopEvent{} }
func (m *StopEvent) String() string            { return proto.CompactTextString(m) }
func (*StopEvent) ProtoMessage()               {}
func (*StopEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StopEvent) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

type StatusResponse struct {
	OK bool `protobuf:"varint,1,opt,name=OK" json:"OK,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StatusResponse) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

// TODO - move from there
type ChangesArchiveQuery struct {
	RemainingRows uint64 `protobuf:"varint,1,opt,name=RemainingRows" json:"RemainingRows,omitempty"`
}

func (m *ChangesArchiveQuery) Reset()                    { *m = ChangesArchiveQuery{} }
func (m *ChangesArchiveQuery) String() string            { return proto.CompactTextString(m) }
func (*ChangesArchiveQuery) ProtoMessage()               {}
func (*ChangesArchiveQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ChangesArchiveQuery) GetRemainingRows() uint64 {
	if m != nil {
		return m.RemainingRows
	}
	return 0
}

func init() {
	proto.RegisterType((*Query)(nil), "service.Query")
	proto.RegisterType((*ResourcePolicyQuery)(nil), "service.ResourcePolicyQuery")
	proto.RegisterType((*ResourcePolicy)(nil), "service.ResourcePolicy")
	proto.RegisterType((*ActionOutputQuery)(nil), "service.ActionOutputQuery")
	proto.RegisterType((*SourceSingleQuery)(nil), "service.SourceSingleQuery")
	proto.RegisterType((*StopEvent)(nil), "service.StopEvent")
	proto.RegisterType((*StatusResponse)(nil), "service.StatusResponse")
	proto.RegisterType((*ChangesArchiveQuery)(nil), "service.ChangesArchiveQuery")
	proto.RegisterEnum("service.OperationType", OperationType_name, OperationType_value)
	proto.RegisterEnum("service.ResourcePolicyAction", ResourcePolicyAction_name, ResourcePolicyAction_value)
	proto.RegisterEnum("service.ResourcePolicy_PolicyEffect", ResourcePolicy_PolicyEffect_name, ResourcePolicy_PolicyEffect_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Starter service

type StarterClient interface {
	Start(ctx context.Context, in *google_protobuf1.Empty, opts ...client.CallOption) (*google_protobuf1.Empty, error)
}

type starterClient struct {
	c           client.Client
	serviceName string
}

func NewStarterClient(serviceName string, c client.Client) StarterClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "service"
	}
	return &starterClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *starterClient) Start(ctx context.Context, in *google_protobuf1.Empty, opts ...client.CallOption) (*google_protobuf1.Empty, error) {
	req := c.c.NewRequest(c.serviceName, "Starter.Start", in)
	out := new(google_protobuf1.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Starter service

type StarterHandler interface {
	Start(context.Context, *google_protobuf1.Empty, *google_protobuf1.Empty) error
}

func RegisterStarterHandler(s server.Server, hdlr StarterHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Starter{hdlr}, opts...))
}

type Starter struct {
	StarterHandler
}

func (h *Starter) Start(ctx context.Context, in *google_protobuf1.Empty, out *google_protobuf1.Empty) error {
	return h.StarterHandler.Start(ctx, in, out)
}

// Client API for Service service

type ServiceClient interface {
	Status(ctx context.Context, in *google_protobuf1.Empty, opts ...client.CallOption) (*StatusResponse, error)
}

type serviceClient struct {
	c           client.Client
	serviceName string
}

func NewServiceClient(serviceName string, c client.Client) ServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "service"
	}
	return &serviceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *serviceClient) Status(ctx context.Context, in *google_protobuf1.Empty, opts ...client.CallOption) (*StatusResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Service.Status", in)
	out := new(StatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceHandler interface {
	Status(context.Context, *google_protobuf1.Empty, *StatusResponse) error
}

func RegisterServiceHandler(s server.Server, hdlr ServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Service{hdlr}, opts...))
}

type Service struct {
	ServiceHandler
}

func (h *Service) Status(ctx context.Context, in *google_protobuf1.Empty, out *StatusResponse) error {
	return h.ServiceHandler.Status(ctx, in, out)
}

// Client API for Archiver service

type ArchiverClient interface {
	Archive(ctx context.Context, in *Query, opts ...client.CallOption) (*StatusResponse, error)
}

type archiverClient struct {
	c           client.Client
	serviceName string
}

func NewArchiverClient(serviceName string, c client.Client) ArchiverClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "service"
	}
	return &archiverClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *archiverClient) Archive(ctx context.Context, in *Query, opts ...client.CallOption) (*StatusResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Archiver.Archive", in)
	out := new(StatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Archiver service

type ArchiverHandler interface {
	Archive(context.Context, *Query, *StatusResponse) error
}

func RegisterArchiverHandler(s server.Server, hdlr ArchiverHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Archiver{hdlr}, opts...))
}

type Archiver struct {
	ArchiverHandler
}

func (h *Archiver) Archive(ctx context.Context, in *Query, out *StatusResponse) error {
	return h.ArchiverHandler.Archive(ctx, in, out)
}

func init() { proto.RegisterFile("common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 760 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xc7, 0xd7, 0x4e, 0x9c, 0xc4, 0xa7, 0xbb, 0xc1, 0x9d, 0xad, 0x8a, 0x09, 0x8b, 0x64, 0x99,
	0x15, 0x8a, 0x56, 0xe0, 0x95, 0x42, 0x11, 0x42, 0x20, 0xa4, 0xb4, 0x31, 0x52, 0x68, 0x89, 0xcb,
	0xb8, 0x55, 0xd5, 0x2b, 0xe4, 0x38, 0x13, 0xd7, 0x34, 0xf1, 0x58, 0xe3, 0x71, 0x2b, 0x5f, 0xf0,
	0x04, 0xbc, 0x00, 0x6f, 0xc7, 0xab, 0xac, 0x3c, 0x33, 0x49, 0x93, 0x36, 0xb9, 0xca, 0x9c, 0x73,
	0xfe, 0xe7, 0x63, 0x7e, 0x67, 0x62, 0x78, 0x1d, 0xd3, 0xe5, 0x92, 0x66, 0x5e, 0xce, 0x28, 0xa7,
	0xa8, 0x5d, 0x10, 0xf6, 0x90, 0xc6, 0xa4, 0xf7, 0x45, 0x42, 0x69, 0xb2, 0x20, 0x1f, 0x85, 0x7b,
	0x5a, 0xce, 0x3f, 0x46, 0x59, 0x25, 0x35, 0xbd, 0x2f, 0x9f, 0x87, 0xc8, 0x32, 0xe7, 0x2a, 0xe8,
	0xfe, 0xab, 0x83, 0xf1, 0x67, 0x49, 0x58, 0x85, 0x4e, 0x00, 0xc2, 0x72, 0x5a, 0x9f, 0x53, 0x52,
	0xd8, 0x9a, 0xd3, 0xe8, 0x1f, 0x0c, 0x8e, 0x3c, 0x99, 0xeb, 0xad, 0x72, 0xbd, 0x61, 0x56, 0xe1,
	0x0d, 0x1d, 0x3a, 0x01, 0x33, 0xc8, 0x09, 0x8b, 0x78, 0x4a, 0x33, 0x5b, 0x77, 0xb4, 0x7e, 0x77,
	0x70, 0xec, 0xa9, 0xa1, 0xbc, 0x75, 0xe4, 0xaa, 0xca, 0x09, 0x7e, 0x12, 0xa2, 0x09, 0xbc, 0xc5,
	0xa4, 0xa0, 0x25, 0x8b, 0xc9, 0x25, 0x5d, 0xa4, 0x71, 0x25, 0x46, 0xb0, 0x1b, 0x8e, 0xd6, 0x3f,
	0x18, 0xbc, 0x5b, 0xe7, 0xef, 0xd0, 0xe0, 0x5d, 0x89, 0xe8, 0x18, 0x5a, 0xc1, 0x7c, 0x5e, 0x10,
	0x6e, 0x37, 0x1d, 0xad, 0xdf, 0xc0, 0xca, 0x42, 0x47, 0x60, 0x5c, 0xa4, 0xcb, 0x94, 0xdb, 0x86,
	0x70, 0x4b, 0x03, 0xd9, 0xd0, 0x4e, 0x18, 0x2d, 0xf3, 0xd3, 0xca, 0x6e, 0x39, 0x5a, 0xdf, 0xc0,
	0x2b, 0xd3, 0xbd, 0xdd, 0x39, 0x17, 0xea, 0x41, 0x27, 0x2c, 0xa7, 0x7f, 0x93, 0x98, 0x4b, 0x30,
	0x26, 0x5e, 0xdb, 0x75, 0x0b, 0xbf, 0xe6, 0x29, 0x2e, 0xdf, 0xc1, 0xd2, 0x40, 0x16, 0x34, 0x86,
	0x99, 0xbc, 0x50, 0x07, 0xd7, 0x47, 0xf7, 0x3f, 0x1d, 0xba, 0xdb, 0xb5, 0x51, 0x17, 0xf4, 0x74,
	0x66, 0x6b, 0x62, 0x34, 0x3d, 0x9d, 0xd5, 0x6d, 0x56, 0x0a, 0x51, 0xcd, 0xc4, 0x6b, 0x1b, 0xfd,
	0x00, 0xad, 0x61, 0x2c, 0x20, 0x37, 0x04, 0xe4, 0xaf, 0xf6, 0x40, 0x92, 0x22, 0xac, 0xc4, 0xf5,
	0x55, 0xd5, 0xa4, 0x82, 0x8c, 0x89, 0x57, 0x26, 0xfa, 0x05, 0x5a, 0xfe, 0x7c, 0x5e, 0x07, 0x0c,
	0x51, 0xf0, 0xfd, 0x9e, 0x82, 0x9e, 0xfc, 0x91, 0x5a, 0xac, 0x72, 0xd0, 0x37, 0xd0, 0xfd, 0xbd,
	0xa0, 0xd9, 0x19, 0xcd, 0x66, 0x69, 0xdd, 0xa8, 0x10, 0x24, 0x4d, 0xfc, 0xcc, 0xeb, 0x7e, 0x0d,
	0xaf, 0x37, 0xf3, 0x51, 0x07, 0x9a, 0x33, 0x92, 0x55, 0xd6, 0x2b, 0x64, 0x82, 0x11, 0x2d, 0x16,
	0xf4, 0xd1, 0xd2, 0xdc, 0xff, 0x35, 0x38, 0x94, 0xf3, 0x06, 0x25, 0xcf, 0x4b, 0x2e, 0xa1, 0x8b,
	0xd1, 0xe3, 0x98, 0x14, 0x85, 0x40, 0xd4, 0xc1, 0x2b, 0xb3, 0xde, 0xf6, 0x6f, 0x51, 0xba, 0x20,
	0x33, 0xc5, 0x5c, 0x59, 0xe8, 0x5b, 0x38, 0x0c, 0x39, 0x4b, 0xb3, 0xe4, 0x94, 0xce, 0xaa, 0x33,
	0xba, 0xcc, 0x23, 0x46, 0x04, 0x2e, 0x13, 0xbf, 0x0c, 0xa0, 0x3e, 0x7c, 0x56, 0x0f, 0xbb, 0xa9,
	0x95, 0x88, 0x9e, 0xbb, 0x91, 0x07, 0xc8, 0x67, 0x8c, 0x32, 0x59, 0x63, 0x25, 0x36, 0x84, 0x78,
	0x47, 0xa4, 0x5e, 0xfe, 0x84, 0x72, 0x41, 0xa4, 0x83, 0xeb, 0xa3, 0xfb, 0x0f, 0x1c, 0x86, 0x82,
	0x69, 0x98, 0x66, 0xc9, 0x82, 0xac, 0x1f, 0xed, 0xf8, 0xf2, 0x8f, 0xa8, 0xb8, 0x57, 0xcb, 0x56,
	0x16, 0x7a, 0x07, 0xe6, 0x75, 0x41, 0xd8, 0x30, 0x21, 0x19, 0x57, 0xe3, 0x3f, 0x39, 0x90, 0x03,
	0x07, 0x37, 0x94, 0xdd, 0x17, 0x79, 0x14, 0x93, 0xf1, 0x4c, 0x8d, 0xbc, 0xe9, 0x5a, 0xb5, 0x37,
	0x9e, 0xda, 0x7f, 0x07, 0x66, 0xc8, 0x69, 0xee, 0x3f, 0xa8, 0x02, 0xa1, 0xdc, 0xf4, 0x24, 0x5a,
	0x12, 0xc1, 0xd6, 0xc4, 0x9b, 0x2e, 0xd7, 0x81, 0x6e, 0xc8, 0x23, 0x5e, 0x16, 0x98, 0x14, 0x39,
	0xcd, 0x0a, 0x52, 0xbf, 0xd4, 0xe0, 0x5c, 0xad, 0x41, 0x0f, 0xce, 0xdd, 0x9f, 0xe1, 0xed, 0xd9,
	0x5d, 0x94, 0x25, 0xa4, 0x18, 0xb2, 0xf8, 0x2e, 0x7d, 0x50, 0x37, 0x7a, 0x0f, 0x6f, 0x30, 0x59,
	0x46, 0x69, 0x96, 0x66, 0x09, 0xa6, 0x8f, 0x72, 0x71, 0x4d, 0xbc, 0xed, 0xfc, 0xe0, 0xc0, 0x9b,
	0xad, 0x0f, 0x03, 0x6a, 0x81, 0x1e, 0x60, 0xeb, 0x15, 0x6a, 0x43, 0x63, 0x38, 0x19, 0x59, 0xda,
	0x87, 0x00, 0x8e, 0x76, 0xbd, 0x6a, 0x29, 0xb8, 0x95, 0x8f, 0x27, 0xb8, 0x99, 0xf8, 0xd8, 0xd2,
	0xea, 0x17, 0x85, 0xfd, 0xe1, 0xc8, 0xd2, 0x6b, 0xe7, 0x0d, 0x1e, 0x5f, 0xf9, 0x56, 0x03, 0x75,
	0x01, 0xfc, 0xd1, 0xf8, 0xea, 0x2f, 0x7c, 0x7d, 0xe1, 0x87, 0x56, 0x73, 0x70, 0x0a, 0xed, 0x90,
	0x47, 0x8c, 0x13, 0x86, 0x7e, 0x04, 0x43, 0x1c, 0xd1, 0xf1, 0x8b, 0x6f, 0x9b, 0xf8, 0xeb, 0xf6,
	0xf6, 0xf8, 0x07, 0x23, 0x68, 0x2b, 0x48, 0xe8, 0x27, 0x68, 0x49, 0x40, 0x7b, 0x8b, 0x7c, 0xbe,
	0xfe, 0x37, 0x6d, 0x93, 0x1c, 0xfc, 0x0a, 0x1d, 0x85, 0x8c, 0xa1, 0x01, 0xb4, 0xd5, 0x19, 0x75,
	0xd7, 0x7a, 0x41, 0x72, 0x6f, 0xfe, 0xb4, 0x25, 0x1a, 0x7d, 0xff, 0x29, 0x00, 0x00, 0xff, 0xff,
	0xbc, 0x85, 0xa9, 0x82, 0x07, 0x06, 0x00, 0x00,
}
