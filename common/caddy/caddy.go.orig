/*
 * Copyright (c) 2018. Abstrium SAS <team (at) pydio.com>
 * This file is part of Pydio Cells.
 *
 * Pydio Cells is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Pydio Cells is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Pydio Cells.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <https://pydio.com>.
 */

package caddy

import (
	"bytes"
	"fmt"
	"html/template"
<<<<<<< HEAD
	"strings"
	"time"
=======
	"log"
	"strings"
>>>>>>> Push

	"github.com/mholt/caddy"
	"github.com/micro/go-micro/registry"
	"github.com/pydio/cells/common"
<<<<<<< HEAD
	"github.com/pydio/cells/common/config"
	"github.com/pydio/cells/common/log"
	"go.uber.org/zap"
)

var (
	mainCaddy = &Caddy{}
	FuncMap   = template.FuncMap{
		"urls": internalURLFromServices,
	}
	restartChan chan bool
=======
)

var (
	mainCaddy *Caddy
	// First we create a FuncMap with which to register the function.
	funcMap = template.FuncMap{
		"urls": internalURLFromServices,
	}
>>>>>>> Push
)

func init() {
	caddy.AppName = common.PackageLabel
	caddy.AppVersion = common.Version().String()
<<<<<<< HEAD

	go watchRestart()
}

func watchRestart() {
	restartChan = make(chan bool, 1)
	exitChan := make(chan bool, 1)

	go func() {
		<-restartChan

		<-time.After(10 * time.Second)

		restart()

		exitChan <- true
	}()

	<-exitChan
	watchRestart()
=======
>>>>>>> Push
}

// Caddy contains the templates and functions for building a dynamic caddyfile
type Caddy struct {
	serverType    string
	caddyfile     string
	caddytemplate *template.Template
	player        TemplateFunc
	pathes        []string
	templates     []TemplateFunc
	instance      *caddy.Instance
}

// TemplateFunc is a function providing a stringer
<<<<<<< HEAD
type TemplateFunc func() (*bytes.Buffer, error)

// Enable the caddy builder
func Enable(caddyfile string, player TemplateFunc) {
	caddytemplate, err := template.New("pydiocaddy").Funcs(FuncMap).Parse(caddyfile)
	if err != nil {
		log.Fatal("could not load template: ", zap.Error(err))
	}

	mainCaddy.caddyfile = caddyfile
	mainCaddy.caddytemplate = caddytemplate
	mainCaddy.player = player
=======
type TemplateFunc func(*Caddy) (*bytes.Buffer, error)

// Enable the caddy builder
func Enable(caddyfile string, player TemplateFunc) {
	caddytemplate, err := template.New("pydiocaddy").Funcs(funcMap).Parse(caddyfile)
	if err != nil {
		log.Fatal("could not load template: ", err)
	}

	mainCaddy = &Caddy{
		caddyfile:     caddyfile,
		caddytemplate: caddytemplate,
		player:        player,
	}
>>>>>>> Push

	caddyLoader := func(serverType string) (caddy.Input, error) {
		buf, err := mainCaddy.Play()
		if err != nil {
			return nil, err
		}

		return caddy.CaddyfileInput{
			Contents:       buf.Bytes(),
			ServerTypeName: serverType,
		}, nil
	}

	caddy.SetDefaultCaddyfileLoader("http", caddy.LoaderFunc(caddyLoader))
}

// Get returns the currently enabled caddy builder
func Get() *Caddy {
	return mainCaddy
}

// RegisterPluginTemplate adds a TemplateFunc to be called for each plugin
func RegisterPluginTemplate(fn TemplateFunc, pathes ...string) error {

	mainCaddy.pathes = append(mainCaddy.pathes, pathes...)
	mainCaddy.templates = append(mainCaddy.templates, fn)

	return nil
}

func Start() error {
	// load caddyfile
	caddyfile, err := caddy.LoadCaddyfile("http")
	if err != nil {
		return err
	}

	// start caddy server
	instance, err := caddy.Start(caddyfile)
	if err != nil {
		return err
	}

	mainCaddy.instance = instance
	return nil
}

func Restart() error {
<<<<<<< HEAD
	go func() {
		restartChan <- true
	}()

	return nil
}

func restart() error {

=======
>>>>>>> Push
	if mainCaddy.instance == nil {
		return fmt.Errorf("instance not started")
	}

	// load caddyfile
	caddyfile, err := caddy.LoadCaddyfile("http")
	if err != nil {
		return err
	}

<<<<<<< HEAD
	log.Debug("Restart", zap.ByteString("caddyfile", caddyfile.Body()))
=======
	fmt.Printf("Caddyfile %s\n", caddyfile.Body())
>>>>>>> Push

	// start caddy server
	instance, err := mainCaddy.instance.Restart(caddyfile)
	if err != nil {
		return err
	}

	mainCaddy.instance = instance
	return nil
}

func (c *Caddy) Play() (*bytes.Buffer, error) {
<<<<<<< HEAD
	return c.player()
=======
	return c.player(c)
>>>>>>> Push
}

func GetInstance() *caddy.Instance {
	return mainCaddy.instance
}

func (c *Caddy) GetTemplate() *template.Template {
	return c.caddytemplate
}

<<<<<<< HEAD
func GetPathes() []string {
	return mainCaddy.pathes
}

func GetTemplates() []TemplateFunc {
	return mainCaddy.templates
=======
func (c *Caddy) GetPathes() []string {
	return c.pathes
}

func (c *Caddy) GetTemplates() []TemplateFunc {
	return c.templates
>>>>>>> Push
}

func internalURLFromServices(name string, uri ...string) string {
	var res []string

	services, _ := registry.GetService(name)

	for _, service := range services {
		for _, node := range service.Nodes {
			res = append(res, fmt.Sprintf("%s:%d%s", node.Address, node.Port, strings.Join(uri, "")))
		}
	}

	if len(res) == 0 {
		return "PENDING"
	}

	return strings.Join(res, " ")
}
<<<<<<< HEAD

func peersFromConfig(path []string, def ...string) string {
	c := config.Get(path...)
	return c.String(def[0])
}
=======
>>>>>>> Push
